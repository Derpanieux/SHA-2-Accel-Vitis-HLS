-- ==============================================================
-- Generated by Vitis HLS v2025.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2025 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity sha256Accel_sha256Accel_Pipeline_VITIS_LOOP_35_4 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    buffer_15_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    buffer_15_ce0 : OUT STD_LOGIC;
    buffer_15_we0 : OUT STD_LOGIC;
    buffer_15_d0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    buffer_14_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    buffer_14_ce0 : OUT STD_LOGIC;
    buffer_14_we0 : OUT STD_LOGIC;
    buffer_14_d0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    buffer_13_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    buffer_13_ce0 : OUT STD_LOGIC;
    buffer_13_we0 : OUT STD_LOGIC;
    buffer_13_d0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    buffer_12_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    buffer_12_ce0 : OUT STD_LOGIC;
    buffer_12_we0 : OUT STD_LOGIC;
    buffer_12_d0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    buffer_11_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    buffer_11_ce0 : OUT STD_LOGIC;
    buffer_11_we0 : OUT STD_LOGIC;
    buffer_11_d0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    buffer_10_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    buffer_10_ce0 : OUT STD_LOGIC;
    buffer_10_we0 : OUT STD_LOGIC;
    buffer_10_d0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    buffer_9_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    buffer_9_ce0 : OUT STD_LOGIC;
    buffer_9_we0 : OUT STD_LOGIC;
    buffer_9_d0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    buffer_8_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    buffer_8_ce0 : OUT STD_LOGIC;
    buffer_8_we0 : OUT STD_LOGIC;
    buffer_8_d0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    buffer_7_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    buffer_7_ce0 : OUT STD_LOGIC;
    buffer_7_we0 : OUT STD_LOGIC;
    buffer_7_d0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    buffer_6_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    buffer_6_ce0 : OUT STD_LOGIC;
    buffer_6_we0 : OUT STD_LOGIC;
    buffer_6_d0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    buffer_5_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    buffer_5_ce0 : OUT STD_LOGIC;
    buffer_5_we0 : OUT STD_LOGIC;
    buffer_5_d0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    buffer_4_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    buffer_4_ce0 : OUT STD_LOGIC;
    buffer_4_we0 : OUT STD_LOGIC;
    buffer_4_d0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    buffer_3_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    buffer_3_ce0 : OUT STD_LOGIC;
    buffer_3_we0 : OUT STD_LOGIC;
    buffer_3_d0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    buffer_2_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    buffer_2_ce0 : OUT STD_LOGIC;
    buffer_2_we0 : OUT STD_LOGIC;
    buffer_2_d0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    buffer_1_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    buffer_1_ce0 : OUT STD_LOGIC;
    buffer_1_we0 : OUT STD_LOGIC;
    buffer_1_d0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    buffer_r_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    buffer_r_ce0 : OUT STD_LOGIC;
    buffer_r_we0 : OUT STD_LOGIC;
    buffer_r_d0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    size : IN STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of sha256Accel_sha256Accel_Pipeline_VITIS_LOOP_35_4 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv7_3F : STD_LOGIC_VECTOR (6 downto 0) := "0111111";
    constant ap_const_lv10_1C0 : STD_LOGIC_VECTOR (9 downto 0) := "0111000000";
    constant ap_const_lv4_E : STD_LOGIC_VECTOR (3 downto 0) := "1110";
    constant ap_const_lv4_D : STD_LOGIC_VECTOR (3 downto 0) := "1101";
    constant ap_const_lv4_C : STD_LOGIC_VECTOR (3 downto 0) := "1100";
    constant ap_const_lv4_B : STD_LOGIC_VECTOR (3 downto 0) := "1011";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_7 : STD_LOGIC_VECTOR (3 downto 0) := "0111";
    constant ap_const_lv4_6 : STD_LOGIC_VECTOR (3 downto 0) := "0110";
    constant ap_const_lv4_5 : STD_LOGIC_VECTOR (3 downto 0) := "0101";
    constant ap_const_lv4_4 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_const_lv4_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv10_200 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv7_7F : STD_LOGIC_VECTOR (6 downto 0) := "1111111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal icmp_ln35_fu_339_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal zext_ln34_fu_370_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sizeIndex_fu_104 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    signal sizeIndex_1_fu_457_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_sizeIndex_load_1 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_sig_allocacmp_sizeIndex_load : STD_LOGIC_VECTOR (6 downto 0);
    signal j_1_fu_108 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    signal add_ln35_fu_451_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_sig_allocacmp_j : STD_LOGIC_VECTOR (9 downto 0);
    signal buffer_14_we0_local : STD_LOGIC;
    signal trunc_ln35_1_fu_352_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_390_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal buffer_14_ce0_local : STD_LOGIC;
    signal buffer_13_we0_local : STD_LOGIC;
    signal buffer_13_ce0_local : STD_LOGIC;
    signal buffer_12_we0_local : STD_LOGIC;
    signal buffer_12_ce0_local : STD_LOGIC;
    signal buffer_11_we0_local : STD_LOGIC;
    signal buffer_11_ce0_local : STD_LOGIC;
    signal buffer_10_we0_local : STD_LOGIC;
    signal buffer_10_ce0_local : STD_LOGIC;
    signal buffer_9_we0_local : STD_LOGIC;
    signal buffer_9_ce0_local : STD_LOGIC;
    signal buffer_8_we0_local : STD_LOGIC;
    signal buffer_8_ce0_local : STD_LOGIC;
    signal buffer_7_we0_local : STD_LOGIC;
    signal buffer_7_ce0_local : STD_LOGIC;
    signal buffer_6_we0_local : STD_LOGIC;
    signal buffer_6_ce0_local : STD_LOGIC;
    signal buffer_5_we0_local : STD_LOGIC;
    signal buffer_5_ce0_local : STD_LOGIC;
    signal buffer_4_we0_local : STD_LOGIC;
    signal buffer_4_ce0_local : STD_LOGIC;
    signal buffer_3_we0_local : STD_LOGIC;
    signal buffer_3_ce0_local : STD_LOGIC;
    signal buffer_2_we0_local : STD_LOGIC;
    signal buffer_2_ce0_local : STD_LOGIC;
    signal buffer_1_we0_local : STD_LOGIC;
    signal buffer_1_ce0_local : STD_LOGIC;
    signal buffer_r_we0_local : STD_LOGIC;
    signal buffer_r_ce0_local : STD_LOGIC;
    signal buffer_15_we0_local : STD_LOGIC;
    signal buffer_15_ce0_local : STD_LOGIC;
    signal trunc_ln2_fu_356_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal sext_ln34_fu_366_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_fu_390_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ready_sig : STD_LOGIC;
    signal ap_done_sig : STD_LOGIC;
    signal tmp_fu_390_p0 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component sha256Accel_bitselect_1ns_64ns_6ns_1_1_1 IS
    generic (
        DATAWIDTH : INTEGER;
        ADDRWIDTH : INTEGER );
    port (
        din : IN STD_LOGIC_VECTOR (63 downto 0);
        sel : IN STD_LOGIC_VECTOR (5 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component sha256Accel_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    bitselect_1ns_64ns_6ns_1_1_1_U42 : component sha256Accel_bitselect_1ns_64ns_6ns_1_1_1
    generic map (
        DATAWIDTH => 64,
        ADDRWIDTH => 6)
    port map (
        din => size,
        sel => tmp_fu_390_p2,
        dout => tmp_fu_390_p3);

    flow_control_loop_pipe_sequential_init_U : component sha256Accel_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready_sig,
        ap_done => ap_done_sig,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    j_1_fu_108_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                if ((icmp_ln35_fu_339_p2 = ap_const_lv1_0)) then 
                    j_1_fu_108 <= add_ln35_fu_451_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    j_1_fu_108 <= ap_const_lv10_1C0;
                end if;
            end if; 
        end if;
    end process;

    sizeIndex_fu_104_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                if ((icmp_ln35_fu_339_p2 = ap_const_lv1_0)) then 
                    sizeIndex_fu_104 <= sizeIndex_1_fu_457_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    sizeIndex_fu_104 <= ap_const_lv7_3F;
                end if;
            end if; 
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln35_fu_451_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_j) + unsigned(ap_const_lv10_1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_block_state1_pp0_stage0_iter0)
    begin
        if ((ap_const_boolean_1 = ap_block_state1_pp0_stage0_iter0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start_int)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_start_int = ap_const_logic_0);
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, icmp_ln35_fu_339_p2)
    begin
        if (((icmp_ln35_fu_339_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_done <= ap_done_sig;

    ap_done_int_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;
    ap_ready <= ap_ready_sig;

    ap_ready_int_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_j_assign_proc : process(ap_CS_fsm_state1, ap_loop_init, j_1_fu_108)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_j <= ap_const_lv10_1C0;
        else 
            ap_sig_allocacmp_j <= j_1_fu_108;
        end if; 
    end process;


    ap_sig_allocacmp_sizeIndex_load_assign_proc : process(ap_CS_fsm_state1, sizeIndex_fu_104, ap_loop_init)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_sizeIndex_load <= ap_const_lv7_3F;
        else 
            ap_sig_allocacmp_sizeIndex_load <= sizeIndex_fu_104;
        end if; 
    end process;


    ap_sig_allocacmp_sizeIndex_load_1_assign_proc : process(ap_CS_fsm_state1, sizeIndex_fu_104, ap_loop_init)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_sizeIndex_load_1 <= ap_const_lv7_3F;
        else 
            ap_sig_allocacmp_sizeIndex_load_1 <= sizeIndex_fu_104;
        end if; 
    end process;

    buffer_10_address0 <= zext_ln34_fu_370_p1(5 - 1 downto 0);
    buffer_10_ce0 <= buffer_10_ce0_local;

    buffer_10_ce0_local_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            buffer_10_ce0_local <= ap_const_logic_1;
        else 
            buffer_10_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    buffer_10_d0 <= tmp_fu_390_p3;
    buffer_10_we0 <= buffer_10_we0_local;

    buffer_10_we0_local_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, icmp_ln35_fu_339_p2, trunc_ln35_1_fu_352_p1)
    begin
        if (((icmp_ln35_fu_339_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (trunc_ln35_1_fu_352_p1 = ap_const_lv4_A))) then 
            buffer_10_we0_local <= ap_const_logic_1;
        else 
            buffer_10_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    buffer_11_address0 <= zext_ln34_fu_370_p1(5 - 1 downto 0);
    buffer_11_ce0 <= buffer_11_ce0_local;

    buffer_11_ce0_local_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            buffer_11_ce0_local <= ap_const_logic_1;
        else 
            buffer_11_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    buffer_11_d0 <= tmp_fu_390_p3;
    buffer_11_we0 <= buffer_11_we0_local;

    buffer_11_we0_local_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, icmp_ln35_fu_339_p2, trunc_ln35_1_fu_352_p1)
    begin
        if (((icmp_ln35_fu_339_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (trunc_ln35_1_fu_352_p1 = ap_const_lv4_B))) then 
            buffer_11_we0_local <= ap_const_logic_1;
        else 
            buffer_11_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    buffer_12_address0 <= zext_ln34_fu_370_p1(5 - 1 downto 0);
    buffer_12_ce0 <= buffer_12_ce0_local;

    buffer_12_ce0_local_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            buffer_12_ce0_local <= ap_const_logic_1;
        else 
            buffer_12_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    buffer_12_d0 <= tmp_fu_390_p3;
    buffer_12_we0 <= buffer_12_we0_local;

    buffer_12_we0_local_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, icmp_ln35_fu_339_p2, trunc_ln35_1_fu_352_p1)
    begin
        if (((icmp_ln35_fu_339_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (trunc_ln35_1_fu_352_p1 = ap_const_lv4_C))) then 
            buffer_12_we0_local <= ap_const_logic_1;
        else 
            buffer_12_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    buffer_13_address0 <= zext_ln34_fu_370_p1(5 - 1 downto 0);
    buffer_13_ce0 <= buffer_13_ce0_local;

    buffer_13_ce0_local_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            buffer_13_ce0_local <= ap_const_logic_1;
        else 
            buffer_13_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    buffer_13_d0 <= tmp_fu_390_p3;
    buffer_13_we0 <= buffer_13_we0_local;

    buffer_13_we0_local_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, icmp_ln35_fu_339_p2, trunc_ln35_1_fu_352_p1)
    begin
        if (((icmp_ln35_fu_339_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (trunc_ln35_1_fu_352_p1 = ap_const_lv4_D))) then 
            buffer_13_we0_local <= ap_const_logic_1;
        else 
            buffer_13_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    buffer_14_address0 <= zext_ln34_fu_370_p1(5 - 1 downto 0);
    buffer_14_ce0 <= buffer_14_ce0_local;

    buffer_14_ce0_local_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            buffer_14_ce0_local <= ap_const_logic_1;
        else 
            buffer_14_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    buffer_14_d0 <= tmp_fu_390_p3;
    buffer_14_we0 <= buffer_14_we0_local;

    buffer_14_we0_local_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, icmp_ln35_fu_339_p2, trunc_ln35_1_fu_352_p1)
    begin
        if (((icmp_ln35_fu_339_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (trunc_ln35_1_fu_352_p1 = ap_const_lv4_E))) then 
            buffer_14_we0_local <= ap_const_logic_1;
        else 
            buffer_14_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    buffer_15_address0 <= zext_ln34_fu_370_p1(5 - 1 downto 0);
    buffer_15_ce0 <= buffer_15_ce0_local;

    buffer_15_ce0_local_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            buffer_15_ce0_local <= ap_const_logic_1;
        else 
            buffer_15_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    buffer_15_d0 <= tmp_fu_390_p3;
    buffer_15_we0 <= buffer_15_we0_local;

    buffer_15_we0_local_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, icmp_ln35_fu_339_p2, trunc_ln35_1_fu_352_p1)
    begin
        if (((icmp_ln35_fu_339_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (trunc_ln35_1_fu_352_p1 = ap_const_lv4_F))) then 
            buffer_15_we0_local <= ap_const_logic_1;
        else 
            buffer_15_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    buffer_1_address0 <= zext_ln34_fu_370_p1(5 - 1 downto 0);
    buffer_1_ce0 <= buffer_1_ce0_local;

    buffer_1_ce0_local_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            buffer_1_ce0_local <= ap_const_logic_1;
        else 
            buffer_1_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    buffer_1_d0 <= tmp_fu_390_p3;
    buffer_1_we0 <= buffer_1_we0_local;

    buffer_1_we0_local_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, icmp_ln35_fu_339_p2, trunc_ln35_1_fu_352_p1)
    begin
        if (((icmp_ln35_fu_339_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (trunc_ln35_1_fu_352_p1 = ap_const_lv4_1))) then 
            buffer_1_we0_local <= ap_const_logic_1;
        else 
            buffer_1_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    buffer_2_address0 <= zext_ln34_fu_370_p1(5 - 1 downto 0);
    buffer_2_ce0 <= buffer_2_ce0_local;

    buffer_2_ce0_local_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            buffer_2_ce0_local <= ap_const_logic_1;
        else 
            buffer_2_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    buffer_2_d0 <= tmp_fu_390_p3;
    buffer_2_we0 <= buffer_2_we0_local;

    buffer_2_we0_local_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, icmp_ln35_fu_339_p2, trunc_ln35_1_fu_352_p1)
    begin
        if (((icmp_ln35_fu_339_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (trunc_ln35_1_fu_352_p1 = ap_const_lv4_2))) then 
            buffer_2_we0_local <= ap_const_logic_1;
        else 
            buffer_2_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    buffer_3_address0 <= zext_ln34_fu_370_p1(5 - 1 downto 0);
    buffer_3_ce0 <= buffer_3_ce0_local;

    buffer_3_ce0_local_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            buffer_3_ce0_local <= ap_const_logic_1;
        else 
            buffer_3_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    buffer_3_d0 <= tmp_fu_390_p3;
    buffer_3_we0 <= buffer_3_we0_local;

    buffer_3_we0_local_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, icmp_ln35_fu_339_p2, trunc_ln35_1_fu_352_p1)
    begin
        if (((icmp_ln35_fu_339_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (trunc_ln35_1_fu_352_p1 = ap_const_lv4_3))) then 
            buffer_3_we0_local <= ap_const_logic_1;
        else 
            buffer_3_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    buffer_4_address0 <= zext_ln34_fu_370_p1(5 - 1 downto 0);
    buffer_4_ce0 <= buffer_4_ce0_local;

    buffer_4_ce0_local_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            buffer_4_ce0_local <= ap_const_logic_1;
        else 
            buffer_4_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    buffer_4_d0 <= tmp_fu_390_p3;
    buffer_4_we0 <= buffer_4_we0_local;

    buffer_4_we0_local_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, icmp_ln35_fu_339_p2, trunc_ln35_1_fu_352_p1)
    begin
        if (((icmp_ln35_fu_339_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (trunc_ln35_1_fu_352_p1 = ap_const_lv4_4))) then 
            buffer_4_we0_local <= ap_const_logic_1;
        else 
            buffer_4_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    buffer_5_address0 <= zext_ln34_fu_370_p1(5 - 1 downto 0);
    buffer_5_ce0 <= buffer_5_ce0_local;

    buffer_5_ce0_local_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            buffer_5_ce0_local <= ap_const_logic_1;
        else 
            buffer_5_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    buffer_5_d0 <= tmp_fu_390_p3;
    buffer_5_we0 <= buffer_5_we0_local;

    buffer_5_we0_local_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, icmp_ln35_fu_339_p2, trunc_ln35_1_fu_352_p1)
    begin
        if (((icmp_ln35_fu_339_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (trunc_ln35_1_fu_352_p1 = ap_const_lv4_5))) then 
            buffer_5_we0_local <= ap_const_logic_1;
        else 
            buffer_5_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    buffer_6_address0 <= zext_ln34_fu_370_p1(5 - 1 downto 0);
    buffer_6_ce0 <= buffer_6_ce0_local;

    buffer_6_ce0_local_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            buffer_6_ce0_local <= ap_const_logic_1;
        else 
            buffer_6_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    buffer_6_d0 <= tmp_fu_390_p3;
    buffer_6_we0 <= buffer_6_we0_local;

    buffer_6_we0_local_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, icmp_ln35_fu_339_p2, trunc_ln35_1_fu_352_p1)
    begin
        if (((icmp_ln35_fu_339_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (trunc_ln35_1_fu_352_p1 = ap_const_lv4_6))) then 
            buffer_6_we0_local <= ap_const_logic_1;
        else 
            buffer_6_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    buffer_7_address0 <= zext_ln34_fu_370_p1(5 - 1 downto 0);
    buffer_7_ce0 <= buffer_7_ce0_local;

    buffer_7_ce0_local_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            buffer_7_ce0_local <= ap_const_logic_1;
        else 
            buffer_7_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    buffer_7_d0 <= tmp_fu_390_p3;
    buffer_7_we0 <= buffer_7_we0_local;

    buffer_7_we0_local_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, icmp_ln35_fu_339_p2, trunc_ln35_1_fu_352_p1)
    begin
        if (((icmp_ln35_fu_339_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (trunc_ln35_1_fu_352_p1 = ap_const_lv4_7))) then 
            buffer_7_we0_local <= ap_const_logic_1;
        else 
            buffer_7_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    buffer_8_address0 <= zext_ln34_fu_370_p1(5 - 1 downto 0);
    buffer_8_ce0 <= buffer_8_ce0_local;

    buffer_8_ce0_local_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            buffer_8_ce0_local <= ap_const_logic_1;
        else 
            buffer_8_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    buffer_8_d0 <= tmp_fu_390_p3;
    buffer_8_we0 <= buffer_8_we0_local;

    buffer_8_we0_local_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, icmp_ln35_fu_339_p2, trunc_ln35_1_fu_352_p1)
    begin
        if (((icmp_ln35_fu_339_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (trunc_ln35_1_fu_352_p1 = ap_const_lv4_8))) then 
            buffer_8_we0_local <= ap_const_logic_1;
        else 
            buffer_8_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    buffer_9_address0 <= zext_ln34_fu_370_p1(5 - 1 downto 0);
    buffer_9_ce0 <= buffer_9_ce0_local;

    buffer_9_ce0_local_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            buffer_9_ce0_local <= ap_const_logic_1;
        else 
            buffer_9_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    buffer_9_d0 <= tmp_fu_390_p3;
    buffer_9_we0 <= buffer_9_we0_local;

    buffer_9_we0_local_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, icmp_ln35_fu_339_p2, trunc_ln35_1_fu_352_p1)
    begin
        if (((icmp_ln35_fu_339_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (trunc_ln35_1_fu_352_p1 = ap_const_lv4_9))) then 
            buffer_9_we0_local <= ap_const_logic_1;
        else 
            buffer_9_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    buffer_r_address0 <= zext_ln34_fu_370_p1(5 - 1 downto 0);
    buffer_r_ce0 <= buffer_r_ce0_local;

    buffer_r_ce0_local_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            buffer_r_ce0_local <= ap_const_logic_1;
        else 
            buffer_r_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    buffer_r_d0 <= tmp_fu_390_p3;
    buffer_r_we0 <= buffer_r_we0_local;

    buffer_r_we0_local_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, icmp_ln35_fu_339_p2, trunc_ln35_1_fu_352_p1)
    begin
        if (((icmp_ln35_fu_339_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (trunc_ln35_1_fu_352_p1 = ap_const_lv4_0))) then 
            buffer_r_we0_local <= ap_const_logic_1;
        else 
            buffer_r_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln35_fu_339_p2 <= "1" when (ap_sig_allocacmp_j = ap_const_lv10_200) else "0";
        sext_ln34_fu_366_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln2_fu_356_p4),5));

    sizeIndex_1_fu_457_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_sizeIndex_load) + unsigned(ap_const_lv7_7F));
    tmp_fu_390_p2 <= ap_sig_allocacmp_sizeIndex_load_1(6 - 1 downto 0);
    trunc_ln2_fu_356_p4 <= ap_sig_allocacmp_j(6 downto 4);
    trunc_ln35_1_fu_352_p1 <= ap_sig_allocacmp_j(4 - 1 downto 0);
    zext_ln34_fu_370_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln34_fu_366_p1),64));
end behav;
