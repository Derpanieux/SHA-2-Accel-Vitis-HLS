-- ==============================================================
-- Generated by Vitis HLS v2025.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2025 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity sha256Accel_sha256Accel_Pipeline_VITIS_LOOP_43_5 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    message_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    message_ce0 : OUT STD_LOGIC;
    message_we0 : OUT STD_LOGIC;
    message_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    buffer_r_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    buffer_r_ce0 : OUT STD_LOGIC;
    buffer_r_q0 : IN STD_LOGIC_VECTOR (0 downto 0);
    buffer_r_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    buffer_r_ce1 : OUT STD_LOGIC;
    buffer_r_q1 : IN STD_LOGIC_VECTOR (0 downto 0);
    buffer_1_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    buffer_1_ce0 : OUT STD_LOGIC;
    buffer_1_q0 : IN STD_LOGIC_VECTOR (0 downto 0);
    buffer_1_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    buffer_1_ce1 : OUT STD_LOGIC;
    buffer_1_q1 : IN STD_LOGIC_VECTOR (0 downto 0);
    buffer_2_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    buffer_2_ce0 : OUT STD_LOGIC;
    buffer_2_q0 : IN STD_LOGIC_VECTOR (0 downto 0);
    buffer_2_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    buffer_2_ce1 : OUT STD_LOGIC;
    buffer_2_q1 : IN STD_LOGIC_VECTOR (0 downto 0);
    buffer_3_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    buffer_3_ce0 : OUT STD_LOGIC;
    buffer_3_q0 : IN STD_LOGIC_VECTOR (0 downto 0);
    buffer_3_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    buffer_3_ce1 : OUT STD_LOGIC;
    buffer_3_q1 : IN STD_LOGIC_VECTOR (0 downto 0);
    buffer_4_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    buffer_4_ce0 : OUT STD_LOGIC;
    buffer_4_q0 : IN STD_LOGIC_VECTOR (0 downto 0);
    buffer_4_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    buffer_4_ce1 : OUT STD_LOGIC;
    buffer_4_q1 : IN STD_LOGIC_VECTOR (0 downto 0);
    buffer_5_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    buffer_5_ce0 : OUT STD_LOGIC;
    buffer_5_q0 : IN STD_LOGIC_VECTOR (0 downto 0);
    buffer_5_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    buffer_5_ce1 : OUT STD_LOGIC;
    buffer_5_q1 : IN STD_LOGIC_VECTOR (0 downto 0);
    buffer_6_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    buffer_6_ce0 : OUT STD_LOGIC;
    buffer_6_q0 : IN STD_LOGIC_VECTOR (0 downto 0);
    buffer_6_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    buffer_6_ce1 : OUT STD_LOGIC;
    buffer_6_q1 : IN STD_LOGIC_VECTOR (0 downto 0);
    buffer_7_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    buffer_7_ce0 : OUT STD_LOGIC;
    buffer_7_q0 : IN STD_LOGIC_VECTOR (0 downto 0);
    buffer_7_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    buffer_7_ce1 : OUT STD_LOGIC;
    buffer_7_q1 : IN STD_LOGIC_VECTOR (0 downto 0);
    buffer_8_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    buffer_8_ce0 : OUT STD_LOGIC;
    buffer_8_q0 : IN STD_LOGIC_VECTOR (0 downto 0);
    buffer_8_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    buffer_8_ce1 : OUT STD_LOGIC;
    buffer_8_q1 : IN STD_LOGIC_VECTOR (0 downto 0);
    buffer_9_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    buffer_9_ce0 : OUT STD_LOGIC;
    buffer_9_q0 : IN STD_LOGIC_VECTOR (0 downto 0);
    buffer_9_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    buffer_9_ce1 : OUT STD_LOGIC;
    buffer_9_q1 : IN STD_LOGIC_VECTOR (0 downto 0);
    buffer_10_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    buffer_10_ce0 : OUT STD_LOGIC;
    buffer_10_q0 : IN STD_LOGIC_VECTOR (0 downto 0);
    buffer_10_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    buffer_10_ce1 : OUT STD_LOGIC;
    buffer_10_q1 : IN STD_LOGIC_VECTOR (0 downto 0);
    buffer_11_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    buffer_11_ce0 : OUT STD_LOGIC;
    buffer_11_q0 : IN STD_LOGIC_VECTOR (0 downto 0);
    buffer_11_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    buffer_11_ce1 : OUT STD_LOGIC;
    buffer_11_q1 : IN STD_LOGIC_VECTOR (0 downto 0);
    buffer_12_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    buffer_12_ce0 : OUT STD_LOGIC;
    buffer_12_q0 : IN STD_LOGIC_VECTOR (0 downto 0);
    buffer_12_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    buffer_12_ce1 : OUT STD_LOGIC;
    buffer_12_q1 : IN STD_LOGIC_VECTOR (0 downto 0);
    buffer_13_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    buffer_13_ce0 : OUT STD_LOGIC;
    buffer_13_q0 : IN STD_LOGIC_VECTOR (0 downto 0);
    buffer_13_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    buffer_13_ce1 : OUT STD_LOGIC;
    buffer_13_q1 : IN STD_LOGIC_VECTOR (0 downto 0);
    buffer_14_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    buffer_14_ce0 : OUT STD_LOGIC;
    buffer_14_q0 : IN STD_LOGIC_VECTOR (0 downto 0);
    buffer_14_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    buffer_14_ce1 : OUT STD_LOGIC;
    buffer_14_q1 : IN STD_LOGIC_VECTOR (0 downto 0);
    buffer_15_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    buffer_15_ce0 : OUT STD_LOGIC;
    buffer_15_q0 : IN STD_LOGIC_VECTOR (0 downto 0);
    buffer_15_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    buffer_15_ce1 : OUT STD_LOGIC;
    buffer_15_q1 : IN STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of sha256Accel_sha256Accel_Pipeline_VITIS_LOOP_43_5 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv4_E : STD_LOGIC_VECTOR (3 downto 0) := "1110";
    constant ap_const_lv9_2 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_const_lv9_3 : STD_LOGIC_VECTOR (8 downto 0) := "000000011";
    constant ap_const_lv9_4 : STD_LOGIC_VECTOR (8 downto 0) := "000000100";
    constant ap_const_lv9_5 : STD_LOGIC_VECTOR (8 downto 0) := "000000101";
    constant ap_const_lv9_6 : STD_LOGIC_VECTOR (8 downto 0) := "000000110";
    constant ap_const_lv9_7 : STD_LOGIC_VECTOR (8 downto 0) := "000000111";
    constant ap_const_lv9_8 : STD_LOGIC_VECTOR (8 downto 0) := "000001000";
    constant ap_const_lv9_9 : STD_LOGIC_VECTOR (8 downto 0) := "000001001";
    constant ap_const_lv9_A : STD_LOGIC_VECTOR (8 downto 0) := "000001010";
    constant ap_const_lv9_B : STD_LOGIC_VECTOR (8 downto 0) := "000001011";
    constant ap_const_lv9_C : STD_LOGIC_VECTOR (8 downto 0) := "000001100";
    constant ap_const_lv9_D : STD_LOGIC_VECTOR (8 downto 0) := "000001101";
    constant ap_const_lv9_E : STD_LOGIC_VECTOR (8 downto 0) := "000001110";
    constant ap_const_lv9_F : STD_LOGIC_VECTOR (8 downto 0) := "000001111";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv10_20 : STD_LOGIC_VECTOR (9 downto 0) := "0000100000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln43_fu_548_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal j_2_reg_1022 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal zext_ln43_1_fu_573_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln42_fu_617_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln42_1_fu_638_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln42_2_fu_659_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln42_3_fu_680_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln42_4_fu_701_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln42_5_fu_722_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln42_6_fu_743_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln42_7_fu_764_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln42_8_fu_785_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln42_9_fu_806_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln42_10_fu_827_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln42_11_fu_848_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln42_12_fu_869_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln42_13_fu_890_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln45_fu_913_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln43_fu_935_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal buffi_fu_114 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    signal add_ln45_fu_919_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_buffi_load : STD_LOGIC_VECTOR (9 downto 0);
    signal j_fu_118 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    signal add_ln43_fu_554_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_sig_allocacmp_j_2 : STD_LOGIC_VECTOR (4 downto 0);
    signal buffer_r_ce1_local : STD_LOGIC;
    signal buffer_r_ce0_local : STD_LOGIC;
    signal buffer_1_ce1_local : STD_LOGIC;
    signal buffer_1_ce0_local : STD_LOGIC;
    signal buffer_2_ce1_local : STD_LOGIC;
    signal buffer_2_ce0_local : STD_LOGIC;
    signal buffer_3_ce1_local : STD_LOGIC;
    signal buffer_3_ce0_local : STD_LOGIC;
    signal buffer_4_ce1_local : STD_LOGIC;
    signal buffer_4_ce0_local : STD_LOGIC;
    signal buffer_5_ce1_local : STD_LOGIC;
    signal buffer_5_ce0_local : STD_LOGIC;
    signal buffer_6_ce1_local : STD_LOGIC;
    signal buffer_6_ce0_local : STD_LOGIC;
    signal buffer_7_ce1_local : STD_LOGIC;
    signal buffer_7_ce0_local : STD_LOGIC;
    signal buffer_8_ce1_local : STD_LOGIC;
    signal buffer_8_ce0_local : STD_LOGIC;
    signal buffer_9_ce1_local : STD_LOGIC;
    signal buffer_9_ce0_local : STD_LOGIC;
    signal buffer_10_ce1_local : STD_LOGIC;
    signal buffer_10_ce0_local : STD_LOGIC;
    signal buffer_11_ce1_local : STD_LOGIC;
    signal buffer_11_ce0_local : STD_LOGIC;
    signal buffer_12_ce1_local : STD_LOGIC;
    signal buffer_12_ce0_local : STD_LOGIC;
    signal buffer_13_ce1_local : STD_LOGIC;
    signal buffer_13_ce0_local : STD_LOGIC;
    signal buffer_14_ce1_local : STD_LOGIC;
    signal buffer_14_ce0_local : STD_LOGIC;
    signal buffer_15_ce1_local : STD_LOGIC;
    signal buffer_15_ce0_local : STD_LOGIC;
    signal message_we0_local : STD_LOGIC;
    signal tmp_8_fu_939_p33 : STD_LOGIC_VECTOR (31 downto 0);
    signal message_ce0_local : STD_LOGIC;
    signal lshr_ln_fu_563_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal buffi_1_fu_593_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal buffi_2_fu_601_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal lshr_ln1_fu_607_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal buffi_3_fu_622_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal lshr_ln42_1_fu_628_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal buffi_4_fu_643_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal lshr_ln42_2_fu_649_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal buffi_5_fu_664_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal lshr_ln42_3_fu_670_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal buffi_6_fu_685_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal lshr_ln42_4_fu_691_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal buffi_7_fu_706_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal lshr_ln42_5_fu_712_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal buffi_8_fu_727_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal lshr_ln42_6_fu_733_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal buffi_9_fu_748_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal lshr_ln42_7_fu_754_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal buffi_10_fu_769_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal lshr_ln42_8_fu_775_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal buffi_11_fu_790_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal lshr_ln42_9_fu_796_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal buffi_12_fu_811_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal lshr_ln42_s_fu_817_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal buffi_13_fu_832_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal lshr_ln42_10_fu_838_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal buffi_14_fu_853_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal lshr_ln42_11_fu_859_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal buffi_15_fu_874_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal lshr_ln42_12_fu_880_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_4_fu_895_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal or_ln1_fu_905_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ready_sig : STD_LOGIC;
    signal ap_done_sig : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component sha256Accel_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component sha256Accel_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready_sig,
        ap_done => ap_done_sig,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    buffi_fu_114_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln43_fu_548_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    buffi_fu_114 <= add_ln45_fu_919_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    buffi_fu_114 <= ap_const_lv10_0;
                end if;
            end if; 
        end if;
    end process;

    j_fu_118_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln43_fu_548_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    j_fu_118 <= add_ln43_fu_554_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    j_fu_118 <= ap_const_lv5_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                j_2_reg_1022 <= ap_sig_allocacmp_j_2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln43_fu_554_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_j_2) + unsigned(ap_const_lv5_1));
    add_ln45_fu_919_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_buffi_load) + unsigned(ap_const_lv10_20));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln43_fu_548_p2)
    begin
        if (((icmp_ln43_fu_548_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_done <= ap_done_sig;

    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;
    ap_ready <= ap_ready_sig;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_buffi_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, buffi_fu_114, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_buffi_load <= ap_const_lv10_0;
        else 
            ap_sig_allocacmp_buffi_load <= buffi_fu_114;
        end if; 
    end process;


    ap_sig_allocacmp_j_2_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, j_fu_118)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_j_2 <= ap_const_lv5_0;
        else 
            ap_sig_allocacmp_j_2 <= j_fu_118;
        end if; 
    end process;

    buffer_10_address0 <= zext_ln42_10_fu_827_p1(5 - 1 downto 0);
    buffer_10_address1 <= zext_ln43_1_fu_573_p1(5 - 1 downto 0);
    buffer_10_ce0 <= buffer_10_ce0_local;

    buffer_10_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            buffer_10_ce0_local <= ap_const_logic_1;
        else 
            buffer_10_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    buffer_10_ce1 <= buffer_10_ce1_local;

    buffer_10_ce1_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            buffer_10_ce1_local <= ap_const_logic_1;
        else 
            buffer_10_ce1_local <= ap_const_logic_0;
        end if; 
    end process;

    buffer_11_address0 <= zext_ln42_11_fu_848_p1(5 - 1 downto 0);
    buffer_11_address1 <= zext_ln43_1_fu_573_p1(5 - 1 downto 0);
    buffer_11_ce0 <= buffer_11_ce0_local;

    buffer_11_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            buffer_11_ce0_local <= ap_const_logic_1;
        else 
            buffer_11_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    buffer_11_ce1 <= buffer_11_ce1_local;

    buffer_11_ce1_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            buffer_11_ce1_local <= ap_const_logic_1;
        else 
            buffer_11_ce1_local <= ap_const_logic_0;
        end if; 
    end process;

    buffer_12_address0 <= zext_ln42_12_fu_869_p1(5 - 1 downto 0);
    buffer_12_address1 <= zext_ln43_1_fu_573_p1(5 - 1 downto 0);
    buffer_12_ce0 <= buffer_12_ce0_local;

    buffer_12_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            buffer_12_ce0_local <= ap_const_logic_1;
        else 
            buffer_12_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    buffer_12_ce1 <= buffer_12_ce1_local;

    buffer_12_ce1_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            buffer_12_ce1_local <= ap_const_logic_1;
        else 
            buffer_12_ce1_local <= ap_const_logic_0;
        end if; 
    end process;

    buffer_13_address0 <= zext_ln42_13_fu_890_p1(5 - 1 downto 0);
    buffer_13_address1 <= zext_ln43_1_fu_573_p1(5 - 1 downto 0);
    buffer_13_ce0 <= buffer_13_ce0_local;

    buffer_13_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            buffer_13_ce0_local <= ap_const_logic_1;
        else 
            buffer_13_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    buffer_13_ce1 <= buffer_13_ce1_local;

    buffer_13_ce1_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            buffer_13_ce1_local <= ap_const_logic_1;
        else 
            buffer_13_ce1_local <= ap_const_logic_0;
        end if; 
    end process;

    buffer_14_address0 <= zext_ln45_fu_913_p1(5 - 1 downto 0);
    buffer_14_address1 <= zext_ln43_1_fu_573_p1(5 - 1 downto 0);
    buffer_14_ce0 <= buffer_14_ce0_local;

    buffer_14_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            buffer_14_ce0_local <= ap_const_logic_1;
        else 
            buffer_14_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    buffer_14_ce1 <= buffer_14_ce1_local;

    buffer_14_ce1_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            buffer_14_ce1_local <= ap_const_logic_1;
        else 
            buffer_14_ce1_local <= ap_const_logic_0;
        end if; 
    end process;

    buffer_15_address0 <= zext_ln45_fu_913_p1(5 - 1 downto 0);
    buffer_15_address1 <= zext_ln43_1_fu_573_p1(5 - 1 downto 0);
    buffer_15_ce0 <= buffer_15_ce0_local;

    buffer_15_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            buffer_15_ce0_local <= ap_const_logic_1;
        else 
            buffer_15_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    buffer_15_ce1 <= buffer_15_ce1_local;

    buffer_15_ce1_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            buffer_15_ce1_local <= ap_const_logic_1;
        else 
            buffer_15_ce1_local <= ap_const_logic_0;
        end if; 
    end process;

    buffer_1_address0 <= zext_ln42_1_fu_638_p1(5 - 1 downto 0);
    buffer_1_address1 <= zext_ln43_1_fu_573_p1(5 - 1 downto 0);
    buffer_1_ce0 <= buffer_1_ce0_local;

    buffer_1_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            buffer_1_ce0_local <= ap_const_logic_1;
        else 
            buffer_1_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    buffer_1_ce1 <= buffer_1_ce1_local;

    buffer_1_ce1_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            buffer_1_ce1_local <= ap_const_logic_1;
        else 
            buffer_1_ce1_local <= ap_const_logic_0;
        end if; 
    end process;

    buffer_2_address0 <= zext_ln42_2_fu_659_p1(5 - 1 downto 0);
    buffer_2_address1 <= zext_ln43_1_fu_573_p1(5 - 1 downto 0);
    buffer_2_ce0 <= buffer_2_ce0_local;

    buffer_2_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            buffer_2_ce0_local <= ap_const_logic_1;
        else 
            buffer_2_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    buffer_2_ce1 <= buffer_2_ce1_local;

    buffer_2_ce1_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            buffer_2_ce1_local <= ap_const_logic_1;
        else 
            buffer_2_ce1_local <= ap_const_logic_0;
        end if; 
    end process;

    buffer_3_address0 <= zext_ln42_3_fu_680_p1(5 - 1 downto 0);
    buffer_3_address1 <= zext_ln43_1_fu_573_p1(5 - 1 downto 0);
    buffer_3_ce0 <= buffer_3_ce0_local;

    buffer_3_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            buffer_3_ce0_local <= ap_const_logic_1;
        else 
            buffer_3_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    buffer_3_ce1 <= buffer_3_ce1_local;

    buffer_3_ce1_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            buffer_3_ce1_local <= ap_const_logic_1;
        else 
            buffer_3_ce1_local <= ap_const_logic_0;
        end if; 
    end process;

    buffer_4_address0 <= zext_ln42_4_fu_701_p1(5 - 1 downto 0);
    buffer_4_address1 <= zext_ln43_1_fu_573_p1(5 - 1 downto 0);
    buffer_4_ce0 <= buffer_4_ce0_local;

    buffer_4_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            buffer_4_ce0_local <= ap_const_logic_1;
        else 
            buffer_4_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    buffer_4_ce1 <= buffer_4_ce1_local;

    buffer_4_ce1_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            buffer_4_ce1_local <= ap_const_logic_1;
        else 
            buffer_4_ce1_local <= ap_const_logic_0;
        end if; 
    end process;

    buffer_5_address0 <= zext_ln42_5_fu_722_p1(5 - 1 downto 0);
    buffer_5_address1 <= zext_ln43_1_fu_573_p1(5 - 1 downto 0);
    buffer_5_ce0 <= buffer_5_ce0_local;

    buffer_5_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            buffer_5_ce0_local <= ap_const_logic_1;
        else 
            buffer_5_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    buffer_5_ce1 <= buffer_5_ce1_local;

    buffer_5_ce1_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            buffer_5_ce1_local <= ap_const_logic_1;
        else 
            buffer_5_ce1_local <= ap_const_logic_0;
        end if; 
    end process;

    buffer_6_address0 <= zext_ln42_6_fu_743_p1(5 - 1 downto 0);
    buffer_6_address1 <= zext_ln43_1_fu_573_p1(5 - 1 downto 0);
    buffer_6_ce0 <= buffer_6_ce0_local;

    buffer_6_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            buffer_6_ce0_local <= ap_const_logic_1;
        else 
            buffer_6_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    buffer_6_ce1 <= buffer_6_ce1_local;

    buffer_6_ce1_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            buffer_6_ce1_local <= ap_const_logic_1;
        else 
            buffer_6_ce1_local <= ap_const_logic_0;
        end if; 
    end process;

    buffer_7_address0 <= zext_ln42_7_fu_764_p1(5 - 1 downto 0);
    buffer_7_address1 <= zext_ln43_1_fu_573_p1(5 - 1 downto 0);
    buffer_7_ce0 <= buffer_7_ce0_local;

    buffer_7_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            buffer_7_ce0_local <= ap_const_logic_1;
        else 
            buffer_7_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    buffer_7_ce1 <= buffer_7_ce1_local;

    buffer_7_ce1_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            buffer_7_ce1_local <= ap_const_logic_1;
        else 
            buffer_7_ce1_local <= ap_const_logic_0;
        end if; 
    end process;

    buffer_8_address0 <= zext_ln42_8_fu_785_p1(5 - 1 downto 0);
    buffer_8_address1 <= zext_ln43_1_fu_573_p1(5 - 1 downto 0);
    buffer_8_ce0 <= buffer_8_ce0_local;

    buffer_8_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            buffer_8_ce0_local <= ap_const_logic_1;
        else 
            buffer_8_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    buffer_8_ce1 <= buffer_8_ce1_local;

    buffer_8_ce1_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            buffer_8_ce1_local <= ap_const_logic_1;
        else 
            buffer_8_ce1_local <= ap_const_logic_0;
        end if; 
    end process;

    buffer_9_address0 <= zext_ln42_9_fu_806_p1(5 - 1 downto 0);
    buffer_9_address1 <= zext_ln43_1_fu_573_p1(5 - 1 downto 0);
    buffer_9_ce0 <= buffer_9_ce0_local;

    buffer_9_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            buffer_9_ce0_local <= ap_const_logic_1;
        else 
            buffer_9_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    buffer_9_ce1 <= buffer_9_ce1_local;

    buffer_9_ce1_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            buffer_9_ce1_local <= ap_const_logic_1;
        else 
            buffer_9_ce1_local <= ap_const_logic_0;
        end if; 
    end process;

    buffer_r_address0 <= zext_ln42_fu_617_p1(5 - 1 downto 0);
    buffer_r_address1 <= zext_ln43_1_fu_573_p1(5 - 1 downto 0);
    buffer_r_ce0 <= buffer_r_ce0_local;

    buffer_r_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            buffer_r_ce0_local <= ap_const_logic_1;
        else 
            buffer_r_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    buffer_r_ce1 <= buffer_r_ce1_local;

    buffer_r_ce1_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            buffer_r_ce1_local <= ap_const_logic_1;
        else 
            buffer_r_ce1_local <= ap_const_logic_0;
        end if; 
    end process;

    buffi_10_fu_769_p2 <= std_logic_vector(unsigned(buffi_1_fu_593_p3) + unsigned(ap_const_lv9_A));
    buffi_11_fu_790_p2 <= std_logic_vector(unsigned(buffi_1_fu_593_p3) + unsigned(ap_const_lv9_B));
    buffi_12_fu_811_p2 <= std_logic_vector(unsigned(buffi_1_fu_593_p3) + unsigned(ap_const_lv9_C));
    buffi_13_fu_832_p2 <= std_logic_vector(unsigned(buffi_1_fu_593_p3) + unsigned(ap_const_lv9_D));
    buffi_14_fu_853_p2 <= std_logic_vector(unsigned(buffi_1_fu_593_p3) + unsigned(ap_const_lv9_E));
    buffi_15_fu_874_p2 <= std_logic_vector(unsigned(buffi_1_fu_593_p3) + unsigned(ap_const_lv9_F));
    buffi_1_fu_593_p3 <= (lshr_ln_fu_563_p4 & ap_const_lv4_E);
    buffi_2_fu_601_p2 <= std_logic_vector(unsigned(buffi_1_fu_593_p3) + unsigned(ap_const_lv9_2));
    buffi_3_fu_622_p2 <= std_logic_vector(unsigned(buffi_1_fu_593_p3) + unsigned(ap_const_lv9_3));
    buffi_4_fu_643_p2 <= std_logic_vector(unsigned(buffi_1_fu_593_p3) + unsigned(ap_const_lv9_4));
    buffi_5_fu_664_p2 <= std_logic_vector(unsigned(buffi_1_fu_593_p3) + unsigned(ap_const_lv9_5));
    buffi_6_fu_685_p2 <= std_logic_vector(unsigned(buffi_1_fu_593_p3) + unsigned(ap_const_lv9_6));
    buffi_7_fu_706_p2 <= std_logic_vector(unsigned(buffi_1_fu_593_p3) + unsigned(ap_const_lv9_7));
    buffi_8_fu_727_p2 <= std_logic_vector(unsigned(buffi_1_fu_593_p3) + unsigned(ap_const_lv9_8));
    buffi_9_fu_748_p2 <= std_logic_vector(unsigned(buffi_1_fu_593_p3) + unsigned(ap_const_lv9_9));
    icmp_ln43_fu_548_p2 <= "1" when (ap_sig_allocacmp_j_2 = ap_const_lv5_10) else "0";
    lshr_ln1_fu_607_p4 <= buffi_2_fu_601_p2(8 downto 4);
    lshr_ln42_10_fu_838_p4 <= buffi_13_fu_832_p2(8 downto 4);
    lshr_ln42_11_fu_859_p4 <= buffi_14_fu_853_p2(8 downto 4);
    lshr_ln42_12_fu_880_p4 <= buffi_15_fu_874_p2(8 downto 4);
    lshr_ln42_1_fu_628_p4 <= buffi_3_fu_622_p2(8 downto 4);
    lshr_ln42_2_fu_649_p4 <= buffi_4_fu_643_p2(8 downto 4);
    lshr_ln42_3_fu_670_p4 <= buffi_5_fu_664_p2(8 downto 4);
    lshr_ln42_4_fu_691_p4 <= buffi_6_fu_685_p2(8 downto 4);
    lshr_ln42_5_fu_712_p4 <= buffi_7_fu_706_p2(8 downto 4);
    lshr_ln42_6_fu_733_p4 <= buffi_8_fu_727_p2(8 downto 4);
    lshr_ln42_7_fu_754_p4 <= buffi_9_fu_748_p2(8 downto 4);
    lshr_ln42_8_fu_775_p4 <= buffi_10_fu_769_p2(8 downto 4);
    lshr_ln42_9_fu_796_p4 <= buffi_11_fu_790_p2(8 downto 4);
    lshr_ln42_s_fu_817_p4 <= buffi_12_fu_811_p2(8 downto 4);
    lshr_ln_fu_563_p4 <= ap_sig_allocacmp_buffi_load(8 downto 4);
    message_address0 <= zext_ln43_fu_935_p1(4 - 1 downto 0);
    message_ce0 <= message_ce0_local;

    message_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            message_ce0_local <= ap_const_logic_1;
        else 
            message_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    message_d0 <= tmp_8_fu_939_p33;
    message_we0 <= message_we0_local;

    message_we0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            message_we0_local <= ap_const_logic_1;
        else 
            message_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    or_ln1_fu_905_p3 <= (tmp_4_fu_895_p4 & ap_const_lv1_1);
    tmp_4_fu_895_p4 <= ap_sig_allocacmp_buffi_load(8 downto 5);
    tmp_8_fu_939_p33 <= (((((((((((((((((((((((((((((((buffer_r_q1 & buffer_1_q1) & buffer_2_q1) & buffer_3_q1) & buffer_4_q1) & buffer_5_q1) & buffer_6_q1) & buffer_7_q1) & buffer_8_q1) & buffer_9_q1) & buffer_10_q1) & buffer_11_q1) & buffer_12_q1) & buffer_13_q1) & buffer_14_q1) & buffer_15_q1) & buffer_r_q0) & buffer_1_q0) & buffer_2_q0) & buffer_3_q0) & buffer_4_q0) & buffer_5_q0) & buffer_6_q0) & buffer_7_q0) & buffer_8_q0) & buffer_9_q0) & buffer_10_q0) & buffer_11_q0) & buffer_12_q0) & buffer_13_q0) & buffer_14_q0) & buffer_15_q0);
    zext_ln42_10_fu_827_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln42_s_fu_817_p4),64));
    zext_ln42_11_fu_848_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln42_10_fu_838_p4),64));
    zext_ln42_12_fu_869_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln42_11_fu_859_p4),64));
    zext_ln42_13_fu_890_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln42_12_fu_880_p4),64));
    zext_ln42_1_fu_638_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln42_1_fu_628_p4),64));
    zext_ln42_2_fu_659_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln42_2_fu_649_p4),64));
    zext_ln42_3_fu_680_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln42_3_fu_670_p4),64));
    zext_ln42_4_fu_701_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln42_4_fu_691_p4),64));
    zext_ln42_5_fu_722_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln42_5_fu_712_p4),64));
    zext_ln42_6_fu_743_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln42_6_fu_733_p4),64));
    zext_ln42_7_fu_764_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln42_7_fu_754_p4),64));
    zext_ln42_8_fu_785_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln42_8_fu_775_p4),64));
    zext_ln42_9_fu_806_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln42_9_fu_796_p4),64));
    zext_ln42_fu_617_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln1_fu_607_p4),64));
    zext_ln43_1_fu_573_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln_fu_563_p4),64));
    zext_ln43_fu_935_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_2_reg_1022),64));
    zext_ln45_fu_913_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln1_fu_905_p3),64));
end behav;
