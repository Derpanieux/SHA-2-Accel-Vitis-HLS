// ==============================================================
// Generated by Vitis HLS v2025.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2025 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module sha256Accel_sha256Accel_Pipeline_VITIS_LOOP_43_5 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        message_address0,
        message_ce0,
        message_we0,
        message_d0,
        buffer_r_address0,
        buffer_r_ce0,
        buffer_r_q0,
        buffer_r_address1,
        buffer_r_ce1,
        buffer_r_q1,
        buffer_1_address0,
        buffer_1_ce0,
        buffer_1_q0,
        buffer_1_address1,
        buffer_1_ce1,
        buffer_1_q1,
        buffer_2_address0,
        buffer_2_ce0,
        buffer_2_q0,
        buffer_2_address1,
        buffer_2_ce1,
        buffer_2_q1,
        buffer_3_address0,
        buffer_3_ce0,
        buffer_3_q0,
        buffer_3_address1,
        buffer_3_ce1,
        buffer_3_q1,
        buffer_4_address0,
        buffer_4_ce0,
        buffer_4_q0,
        buffer_4_address1,
        buffer_4_ce1,
        buffer_4_q1,
        buffer_5_address0,
        buffer_5_ce0,
        buffer_5_q0,
        buffer_5_address1,
        buffer_5_ce1,
        buffer_5_q1,
        buffer_6_address0,
        buffer_6_ce0,
        buffer_6_q0,
        buffer_6_address1,
        buffer_6_ce1,
        buffer_6_q1,
        buffer_7_address0,
        buffer_7_ce0,
        buffer_7_q0,
        buffer_7_address1,
        buffer_7_ce1,
        buffer_7_q1,
        buffer_8_address0,
        buffer_8_ce0,
        buffer_8_q0,
        buffer_8_address1,
        buffer_8_ce1,
        buffer_8_q1,
        buffer_9_address0,
        buffer_9_ce0,
        buffer_9_q0,
        buffer_9_address1,
        buffer_9_ce1,
        buffer_9_q1,
        buffer_10_address0,
        buffer_10_ce0,
        buffer_10_q0,
        buffer_10_address1,
        buffer_10_ce1,
        buffer_10_q1,
        buffer_11_address0,
        buffer_11_ce0,
        buffer_11_q0,
        buffer_11_address1,
        buffer_11_ce1,
        buffer_11_q1,
        buffer_12_address0,
        buffer_12_ce0,
        buffer_12_q0,
        buffer_12_address1,
        buffer_12_ce1,
        buffer_12_q1,
        buffer_13_address0,
        buffer_13_ce0,
        buffer_13_q0,
        buffer_13_address1,
        buffer_13_ce1,
        buffer_13_q1,
        buffer_14_address0,
        buffer_14_ce0,
        buffer_14_q0,
        buffer_14_address1,
        buffer_14_ce1,
        buffer_14_q1,
        buffer_15_address0,
        buffer_15_ce0,
        buffer_15_q0,
        buffer_15_address1,
        buffer_15_ce1,
        buffer_15_q1
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] message_address0;
output   message_ce0;
output   message_we0;
output  [31:0] message_d0;
output  [4:0] buffer_r_address0;
output   buffer_r_ce0;
input  [0:0] buffer_r_q0;
output  [4:0] buffer_r_address1;
output   buffer_r_ce1;
input  [0:0] buffer_r_q1;
output  [4:0] buffer_1_address0;
output   buffer_1_ce0;
input  [0:0] buffer_1_q0;
output  [4:0] buffer_1_address1;
output   buffer_1_ce1;
input  [0:0] buffer_1_q1;
output  [4:0] buffer_2_address0;
output   buffer_2_ce0;
input  [0:0] buffer_2_q0;
output  [4:0] buffer_2_address1;
output   buffer_2_ce1;
input  [0:0] buffer_2_q1;
output  [4:0] buffer_3_address0;
output   buffer_3_ce0;
input  [0:0] buffer_3_q0;
output  [4:0] buffer_3_address1;
output   buffer_3_ce1;
input  [0:0] buffer_3_q1;
output  [4:0] buffer_4_address0;
output   buffer_4_ce0;
input  [0:0] buffer_4_q0;
output  [4:0] buffer_4_address1;
output   buffer_4_ce1;
input  [0:0] buffer_4_q1;
output  [4:0] buffer_5_address0;
output   buffer_5_ce0;
input  [0:0] buffer_5_q0;
output  [4:0] buffer_5_address1;
output   buffer_5_ce1;
input  [0:0] buffer_5_q1;
output  [4:0] buffer_6_address0;
output   buffer_6_ce0;
input  [0:0] buffer_6_q0;
output  [4:0] buffer_6_address1;
output   buffer_6_ce1;
input  [0:0] buffer_6_q1;
output  [4:0] buffer_7_address0;
output   buffer_7_ce0;
input  [0:0] buffer_7_q0;
output  [4:0] buffer_7_address1;
output   buffer_7_ce1;
input  [0:0] buffer_7_q1;
output  [4:0] buffer_8_address0;
output   buffer_8_ce0;
input  [0:0] buffer_8_q0;
output  [4:0] buffer_8_address1;
output   buffer_8_ce1;
input  [0:0] buffer_8_q1;
output  [4:0] buffer_9_address0;
output   buffer_9_ce0;
input  [0:0] buffer_9_q0;
output  [4:0] buffer_9_address1;
output   buffer_9_ce1;
input  [0:0] buffer_9_q1;
output  [4:0] buffer_10_address0;
output   buffer_10_ce0;
input  [0:0] buffer_10_q0;
output  [4:0] buffer_10_address1;
output   buffer_10_ce1;
input  [0:0] buffer_10_q1;
output  [4:0] buffer_11_address0;
output   buffer_11_ce0;
input  [0:0] buffer_11_q0;
output  [4:0] buffer_11_address1;
output   buffer_11_ce1;
input  [0:0] buffer_11_q1;
output  [4:0] buffer_12_address0;
output   buffer_12_ce0;
input  [0:0] buffer_12_q0;
output  [4:0] buffer_12_address1;
output   buffer_12_ce1;
input  [0:0] buffer_12_q1;
output  [4:0] buffer_13_address0;
output   buffer_13_ce0;
input  [0:0] buffer_13_q0;
output  [4:0] buffer_13_address1;
output   buffer_13_ce1;
input  [0:0] buffer_13_q1;
output  [4:0] buffer_14_address0;
output   buffer_14_ce0;
input  [0:0] buffer_14_q0;
output  [4:0] buffer_14_address1;
output   buffer_14_ce1;
input  [0:0] buffer_14_q1;
output  [4:0] buffer_15_address0;
output   buffer_15_ce0;
input  [0:0] buffer_15_q0;
output  [4:0] buffer_15_address1;
output   buffer_15_ce1;
input  [0:0] buffer_15_q1;

reg ap_idle;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln43_fu_548_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg   [4:0] j_2_reg_1022;
wire    ap_block_pp0_stage0_11001;
wire   [63:0] zext_ln43_1_fu_573_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln42_fu_617_p1;
wire   [63:0] zext_ln42_1_fu_638_p1;
wire   [63:0] zext_ln42_2_fu_659_p1;
wire   [63:0] zext_ln42_3_fu_680_p1;
wire   [63:0] zext_ln42_4_fu_701_p1;
wire   [63:0] zext_ln42_5_fu_722_p1;
wire   [63:0] zext_ln42_6_fu_743_p1;
wire   [63:0] zext_ln42_7_fu_764_p1;
wire   [63:0] zext_ln42_8_fu_785_p1;
wire   [63:0] zext_ln42_9_fu_806_p1;
wire   [63:0] zext_ln42_10_fu_827_p1;
wire   [63:0] zext_ln42_11_fu_848_p1;
wire   [63:0] zext_ln42_12_fu_869_p1;
wire   [63:0] zext_ln42_13_fu_890_p1;
wire   [63:0] zext_ln45_fu_913_p1;
wire   [63:0] zext_ln43_fu_935_p1;
reg   [9:0] buffi_fu_114;
wire   [9:0] add_ln45_fu_919_p2;
wire    ap_loop_init;
reg   [9:0] ap_sig_allocacmp_buffi_load;
reg   [4:0] j_fu_118;
wire   [4:0] add_ln43_fu_554_p2;
reg   [4:0] ap_sig_allocacmp_j_2;
reg    buffer_r_ce1_local;
reg    buffer_r_ce0_local;
reg    buffer_1_ce1_local;
reg    buffer_1_ce0_local;
reg    buffer_2_ce1_local;
reg    buffer_2_ce0_local;
reg    buffer_3_ce1_local;
reg    buffer_3_ce0_local;
reg    buffer_4_ce1_local;
reg    buffer_4_ce0_local;
reg    buffer_5_ce1_local;
reg    buffer_5_ce0_local;
reg    buffer_6_ce1_local;
reg    buffer_6_ce0_local;
reg    buffer_7_ce1_local;
reg    buffer_7_ce0_local;
reg    buffer_8_ce1_local;
reg    buffer_8_ce0_local;
reg    buffer_9_ce1_local;
reg    buffer_9_ce0_local;
reg    buffer_10_ce1_local;
reg    buffer_10_ce0_local;
reg    buffer_11_ce1_local;
reg    buffer_11_ce0_local;
reg    buffer_12_ce1_local;
reg    buffer_12_ce0_local;
reg    buffer_13_ce1_local;
reg    buffer_13_ce0_local;
reg    buffer_14_ce1_local;
reg    buffer_14_ce0_local;
reg    buffer_15_ce1_local;
reg    buffer_15_ce0_local;
reg    message_we0_local;
wire   [31:0] tmp_8_fu_939_p33;
reg    message_ce0_local;
wire   [4:0] lshr_ln_fu_563_p4;
wire   [8:0] buffi_1_fu_593_p3;
wire   [8:0] buffi_2_fu_601_p2;
wire   [4:0] lshr_ln1_fu_607_p4;
wire   [8:0] buffi_3_fu_622_p2;
wire   [4:0] lshr_ln42_1_fu_628_p4;
wire   [8:0] buffi_4_fu_643_p2;
wire   [4:0] lshr_ln42_2_fu_649_p4;
wire   [8:0] buffi_5_fu_664_p2;
wire   [4:0] lshr_ln42_3_fu_670_p4;
wire   [8:0] buffi_6_fu_685_p2;
wire   [4:0] lshr_ln42_4_fu_691_p4;
wire   [8:0] buffi_7_fu_706_p2;
wire   [4:0] lshr_ln42_5_fu_712_p4;
wire   [8:0] buffi_8_fu_727_p2;
wire   [4:0] lshr_ln42_6_fu_733_p4;
wire   [8:0] buffi_9_fu_748_p2;
wire   [4:0] lshr_ln42_7_fu_754_p4;
wire   [8:0] buffi_10_fu_769_p2;
wire   [4:0] lshr_ln42_8_fu_775_p4;
wire   [8:0] buffi_11_fu_790_p2;
wire   [4:0] lshr_ln42_9_fu_796_p4;
wire   [8:0] buffi_12_fu_811_p2;
wire   [4:0] lshr_ln42_s_fu_817_p4;
wire   [8:0] buffi_13_fu_832_p2;
wire   [4:0] lshr_ln42_10_fu_838_p4;
wire   [8:0] buffi_14_fu_853_p2;
wire   [4:0] lshr_ln42_11_fu_859_p4;
wire   [8:0] buffi_15_fu_874_p2;
wire   [4:0] lshr_ln42_12_fu_880_p4;
wire   [3:0] tmp_4_fu_895_p4;
wire   [4:0] or_ln1_fu_905_p3;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 buffi_fu_114 = 10'd0;
#0 j_fu_118 = 5'd0;
#0 ap_done_reg = 1'b0;
end

sha256Accel_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln43_fu_548_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            buffi_fu_114 <= add_ln45_fu_919_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            buffi_fu_114 <= 10'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln43_fu_548_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            j_fu_118 <= add_ln43_fu_554_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            j_fu_118 <= 5'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        j_2_reg_1022 <= ap_sig_allocacmp_j_2;
    end
end

always @ (*) begin
    if (((icmp_ln43_fu_548_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_buffi_load = 10'd0;
    end else begin
        ap_sig_allocacmp_buffi_load = buffi_fu_114;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_j_2 = 5'd0;
    end else begin
        ap_sig_allocacmp_j_2 = j_fu_118;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        buffer_10_ce0_local = 1'b1;
    end else begin
        buffer_10_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        buffer_10_ce1_local = 1'b1;
    end else begin
        buffer_10_ce1_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        buffer_11_ce0_local = 1'b1;
    end else begin
        buffer_11_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        buffer_11_ce1_local = 1'b1;
    end else begin
        buffer_11_ce1_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        buffer_12_ce0_local = 1'b1;
    end else begin
        buffer_12_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        buffer_12_ce1_local = 1'b1;
    end else begin
        buffer_12_ce1_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        buffer_13_ce0_local = 1'b1;
    end else begin
        buffer_13_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        buffer_13_ce1_local = 1'b1;
    end else begin
        buffer_13_ce1_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        buffer_14_ce0_local = 1'b1;
    end else begin
        buffer_14_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        buffer_14_ce1_local = 1'b1;
    end else begin
        buffer_14_ce1_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        buffer_15_ce0_local = 1'b1;
    end else begin
        buffer_15_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        buffer_15_ce1_local = 1'b1;
    end else begin
        buffer_15_ce1_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        buffer_1_ce0_local = 1'b1;
    end else begin
        buffer_1_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        buffer_1_ce1_local = 1'b1;
    end else begin
        buffer_1_ce1_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        buffer_2_ce0_local = 1'b1;
    end else begin
        buffer_2_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        buffer_2_ce1_local = 1'b1;
    end else begin
        buffer_2_ce1_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        buffer_3_ce0_local = 1'b1;
    end else begin
        buffer_3_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        buffer_3_ce1_local = 1'b1;
    end else begin
        buffer_3_ce1_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        buffer_4_ce0_local = 1'b1;
    end else begin
        buffer_4_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        buffer_4_ce1_local = 1'b1;
    end else begin
        buffer_4_ce1_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        buffer_5_ce0_local = 1'b1;
    end else begin
        buffer_5_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        buffer_5_ce1_local = 1'b1;
    end else begin
        buffer_5_ce1_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        buffer_6_ce0_local = 1'b1;
    end else begin
        buffer_6_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        buffer_6_ce1_local = 1'b1;
    end else begin
        buffer_6_ce1_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        buffer_7_ce0_local = 1'b1;
    end else begin
        buffer_7_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        buffer_7_ce1_local = 1'b1;
    end else begin
        buffer_7_ce1_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        buffer_8_ce0_local = 1'b1;
    end else begin
        buffer_8_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        buffer_8_ce1_local = 1'b1;
    end else begin
        buffer_8_ce1_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        buffer_9_ce0_local = 1'b1;
    end else begin
        buffer_9_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        buffer_9_ce1_local = 1'b1;
    end else begin
        buffer_9_ce1_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        buffer_r_ce0_local = 1'b1;
    end else begin
        buffer_r_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        buffer_r_ce1_local = 1'b1;
    end else begin
        buffer_r_ce1_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        message_ce0_local = 1'b1;
    end else begin
        message_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        message_we0_local = 1'b1;
    end else begin
        message_we0_local = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln43_fu_554_p2 = (ap_sig_allocacmp_j_2 + 5'd1);

assign add_ln45_fu_919_p2 = (ap_sig_allocacmp_buffi_load + 10'd32);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_done = ap_done_sig;

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = ap_ready_sig;

assign buffer_10_address0 = zext_ln42_10_fu_827_p1;

assign buffer_10_address1 = zext_ln43_1_fu_573_p1;

assign buffer_10_ce0 = buffer_10_ce0_local;

assign buffer_10_ce1 = buffer_10_ce1_local;

assign buffer_11_address0 = zext_ln42_11_fu_848_p1;

assign buffer_11_address1 = zext_ln43_1_fu_573_p1;

assign buffer_11_ce0 = buffer_11_ce0_local;

assign buffer_11_ce1 = buffer_11_ce1_local;

assign buffer_12_address0 = zext_ln42_12_fu_869_p1;

assign buffer_12_address1 = zext_ln43_1_fu_573_p1;

assign buffer_12_ce0 = buffer_12_ce0_local;

assign buffer_12_ce1 = buffer_12_ce1_local;

assign buffer_13_address0 = zext_ln42_13_fu_890_p1;

assign buffer_13_address1 = zext_ln43_1_fu_573_p1;

assign buffer_13_ce0 = buffer_13_ce0_local;

assign buffer_13_ce1 = buffer_13_ce1_local;

assign buffer_14_address0 = zext_ln45_fu_913_p1;

assign buffer_14_address1 = zext_ln43_1_fu_573_p1;

assign buffer_14_ce0 = buffer_14_ce0_local;

assign buffer_14_ce1 = buffer_14_ce1_local;

assign buffer_15_address0 = zext_ln45_fu_913_p1;

assign buffer_15_address1 = zext_ln43_1_fu_573_p1;

assign buffer_15_ce0 = buffer_15_ce0_local;

assign buffer_15_ce1 = buffer_15_ce1_local;

assign buffer_1_address0 = zext_ln42_1_fu_638_p1;

assign buffer_1_address1 = zext_ln43_1_fu_573_p1;

assign buffer_1_ce0 = buffer_1_ce0_local;

assign buffer_1_ce1 = buffer_1_ce1_local;

assign buffer_2_address0 = zext_ln42_2_fu_659_p1;

assign buffer_2_address1 = zext_ln43_1_fu_573_p1;

assign buffer_2_ce0 = buffer_2_ce0_local;

assign buffer_2_ce1 = buffer_2_ce1_local;

assign buffer_3_address0 = zext_ln42_3_fu_680_p1;

assign buffer_3_address1 = zext_ln43_1_fu_573_p1;

assign buffer_3_ce0 = buffer_3_ce0_local;

assign buffer_3_ce1 = buffer_3_ce1_local;

assign buffer_4_address0 = zext_ln42_4_fu_701_p1;

assign buffer_4_address1 = zext_ln43_1_fu_573_p1;

assign buffer_4_ce0 = buffer_4_ce0_local;

assign buffer_4_ce1 = buffer_4_ce1_local;

assign buffer_5_address0 = zext_ln42_5_fu_722_p1;

assign buffer_5_address1 = zext_ln43_1_fu_573_p1;

assign buffer_5_ce0 = buffer_5_ce0_local;

assign buffer_5_ce1 = buffer_5_ce1_local;

assign buffer_6_address0 = zext_ln42_6_fu_743_p1;

assign buffer_6_address1 = zext_ln43_1_fu_573_p1;

assign buffer_6_ce0 = buffer_6_ce0_local;

assign buffer_6_ce1 = buffer_6_ce1_local;

assign buffer_7_address0 = zext_ln42_7_fu_764_p1;

assign buffer_7_address1 = zext_ln43_1_fu_573_p1;

assign buffer_7_ce0 = buffer_7_ce0_local;

assign buffer_7_ce1 = buffer_7_ce1_local;

assign buffer_8_address0 = zext_ln42_8_fu_785_p1;

assign buffer_8_address1 = zext_ln43_1_fu_573_p1;

assign buffer_8_ce0 = buffer_8_ce0_local;

assign buffer_8_ce1 = buffer_8_ce1_local;

assign buffer_9_address0 = zext_ln42_9_fu_806_p1;

assign buffer_9_address1 = zext_ln43_1_fu_573_p1;

assign buffer_9_ce0 = buffer_9_ce0_local;

assign buffer_9_ce1 = buffer_9_ce1_local;

assign buffer_r_address0 = zext_ln42_fu_617_p1;

assign buffer_r_address1 = zext_ln43_1_fu_573_p1;

assign buffer_r_ce0 = buffer_r_ce0_local;

assign buffer_r_ce1 = buffer_r_ce1_local;

assign buffi_10_fu_769_p2 = (buffi_1_fu_593_p3 + 9'd10);

assign buffi_11_fu_790_p2 = (buffi_1_fu_593_p3 + 9'd11);

assign buffi_12_fu_811_p2 = (buffi_1_fu_593_p3 + 9'd12);

assign buffi_13_fu_832_p2 = (buffi_1_fu_593_p3 + 9'd13);

assign buffi_14_fu_853_p2 = (buffi_1_fu_593_p3 + 9'd14);

assign buffi_15_fu_874_p2 = (buffi_1_fu_593_p3 + 9'd15);

assign buffi_1_fu_593_p3 = {{lshr_ln_fu_563_p4}, {4'd14}};

assign buffi_2_fu_601_p2 = (buffi_1_fu_593_p3 + 9'd2);

assign buffi_3_fu_622_p2 = (buffi_1_fu_593_p3 + 9'd3);

assign buffi_4_fu_643_p2 = (buffi_1_fu_593_p3 + 9'd4);

assign buffi_5_fu_664_p2 = (buffi_1_fu_593_p3 + 9'd5);

assign buffi_6_fu_685_p2 = (buffi_1_fu_593_p3 + 9'd6);

assign buffi_7_fu_706_p2 = (buffi_1_fu_593_p3 + 9'd7);

assign buffi_8_fu_727_p2 = (buffi_1_fu_593_p3 + 9'd8);

assign buffi_9_fu_748_p2 = (buffi_1_fu_593_p3 + 9'd9);

assign icmp_ln43_fu_548_p2 = ((ap_sig_allocacmp_j_2 == 5'd16) ? 1'b1 : 1'b0);

assign lshr_ln1_fu_607_p4 = {{buffi_2_fu_601_p2[8:4]}};

assign lshr_ln42_10_fu_838_p4 = {{buffi_13_fu_832_p2[8:4]}};

assign lshr_ln42_11_fu_859_p4 = {{buffi_14_fu_853_p2[8:4]}};

assign lshr_ln42_12_fu_880_p4 = {{buffi_15_fu_874_p2[8:4]}};

assign lshr_ln42_1_fu_628_p4 = {{buffi_3_fu_622_p2[8:4]}};

assign lshr_ln42_2_fu_649_p4 = {{buffi_4_fu_643_p2[8:4]}};

assign lshr_ln42_3_fu_670_p4 = {{buffi_5_fu_664_p2[8:4]}};

assign lshr_ln42_4_fu_691_p4 = {{buffi_6_fu_685_p2[8:4]}};

assign lshr_ln42_5_fu_712_p4 = {{buffi_7_fu_706_p2[8:4]}};

assign lshr_ln42_6_fu_733_p4 = {{buffi_8_fu_727_p2[8:4]}};

assign lshr_ln42_7_fu_754_p4 = {{buffi_9_fu_748_p2[8:4]}};

assign lshr_ln42_8_fu_775_p4 = {{buffi_10_fu_769_p2[8:4]}};

assign lshr_ln42_9_fu_796_p4 = {{buffi_11_fu_790_p2[8:4]}};

assign lshr_ln42_s_fu_817_p4 = {{buffi_12_fu_811_p2[8:4]}};

assign lshr_ln_fu_563_p4 = {{ap_sig_allocacmp_buffi_load[8:4]}};

assign message_address0 = zext_ln43_fu_935_p1;

assign message_ce0 = message_ce0_local;

assign message_d0 = tmp_8_fu_939_p33;

assign message_we0 = message_we0_local;

assign or_ln1_fu_905_p3 = {{tmp_4_fu_895_p4}, {1'd1}};

assign tmp_4_fu_895_p4 = {{ap_sig_allocacmp_buffi_load[8:5]}};

assign tmp_8_fu_939_p33 = {{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{buffer_r_q1}, {buffer_1_q1}}, {buffer_2_q1}}, {buffer_3_q1}}, {buffer_4_q1}}, {buffer_5_q1}}, {buffer_6_q1}}, {buffer_7_q1}}, {buffer_8_q1}}, {buffer_9_q1}}, {buffer_10_q1}}, {buffer_11_q1}}, {buffer_12_q1}}, {buffer_13_q1}}, {buffer_14_q1}}, {buffer_15_q1}}, {buffer_r_q0}}, {buffer_1_q0}}, {buffer_2_q0}}, {buffer_3_q0}}, {buffer_4_q0}}, {buffer_5_q0}}, {buffer_6_q0}}, {buffer_7_q0}}, {buffer_8_q0}}, {buffer_9_q0}}, {buffer_10_q0}}, {buffer_11_q0}}, {buffer_12_q0}}, {buffer_13_q0}}, {buffer_14_q0}}, {buffer_15_q0}};

assign zext_ln42_10_fu_827_p1 = lshr_ln42_s_fu_817_p4;

assign zext_ln42_11_fu_848_p1 = lshr_ln42_10_fu_838_p4;

assign zext_ln42_12_fu_869_p1 = lshr_ln42_11_fu_859_p4;

assign zext_ln42_13_fu_890_p1 = lshr_ln42_12_fu_880_p4;

assign zext_ln42_1_fu_638_p1 = lshr_ln42_1_fu_628_p4;

assign zext_ln42_2_fu_659_p1 = lshr_ln42_2_fu_649_p4;

assign zext_ln42_3_fu_680_p1 = lshr_ln42_3_fu_670_p4;

assign zext_ln42_4_fu_701_p1 = lshr_ln42_4_fu_691_p4;

assign zext_ln42_5_fu_722_p1 = lshr_ln42_5_fu_712_p4;

assign zext_ln42_6_fu_743_p1 = lshr_ln42_6_fu_733_p4;

assign zext_ln42_7_fu_764_p1 = lshr_ln42_7_fu_754_p4;

assign zext_ln42_8_fu_785_p1 = lshr_ln42_8_fu_775_p4;

assign zext_ln42_9_fu_806_p1 = lshr_ln42_9_fu_796_p4;

assign zext_ln42_fu_617_p1 = lshr_ln1_fu_607_p4;

assign zext_ln43_1_fu_573_p1 = lshr_ln_fu_563_p4;

assign zext_ln43_fu_935_p1 = j_2_reg_1022;

assign zext_ln45_fu_913_p1 = or_ln1_fu_905_p3;

endmodule //sha256Accel_sha256Accel_Pipeline_VITIS_LOOP_43_5
