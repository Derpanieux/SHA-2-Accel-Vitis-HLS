-- ==============================================================
-- Generated by Vitis HLS v2025.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2025 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity sha256Accel_chunkProcessor_Pipeline_VITIS_LOOP_10_2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    wValues_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    wValues_ce0 : OUT STD_LOGIC;
    wValues_we0 : OUT STD_LOGIC;
    wValues_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    wValues_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    wValues_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    wValues_ce1 : OUT STD_LOGIC;
    wValues_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    wValues_address2 : OUT STD_LOGIC_VECTOR (5 downto 0);
    wValues_ce2 : OUT STD_LOGIC;
    wValues_q2 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of sha256Accel_chunkProcessor_Pipeline_VITIS_LOOP_10_2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv7_10 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv6_31 : STD_LOGIC_VECTOR (5 downto 0) := "110001";
    constant ap_const_lv6_3E : STD_LOGIC_VECTOR (5 downto 0) := "111110";
    constant ap_const_lv6_39 : STD_LOGIC_VECTOR (5 downto 0) := "111001";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv6_30 : STD_LOGIC_VECTOR (5 downto 0) := "110000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal icmp_ln10_reg_371 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage1 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal i_reg_366 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal i_reg_366_pp0_iter1_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln10_fu_135_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln10_fu_141_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln10_reg_375 : STD_LOGIC_VECTOR (5 downto 0);
    signal wValues_load_reg_395 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal add_ln15_3_fu_339_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln15_3_reg_405 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln15_4_fu_350_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln15_4_reg_410 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln12_fu_151_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln13_fu_162_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln15_fu_173_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln15_1_fu_278_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal zext_ln10_fu_355_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_1_fu_70 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    signal add_ln10_fu_178_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_i : STD_LOGIC_VECTOR (6 downto 0);
    signal wValues_ce2_local : STD_LOGIC;
    signal wValues_ce1_local : STD_LOGIC;
    signal wValues_address1_local : STD_LOGIC_VECTOR (5 downto 0);
    signal wValues_ce0_local : STD_LOGIC;
    signal wValues_address0_local : STD_LOGIC_VECTOR (5 downto 0);
    signal wValues_we0_local : STD_LOGIC;
    signal add_ln12_fu_145_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln13_fu_156_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln15_fu_167_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal shr3_fu_217_p4 : STD_LOGIC_VECTOR (28 downto 0);
    signal shr10_fu_259_p4 : STD_LOGIC_VECTOR (21 downto 0);
    signal add_ln15_1_fu_273_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln38_fu_255_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal lshr_ln4_fu_245_p4 : STD_LOGIC_VECTOR (12 downto 0);
    signal trunc_ln37_fu_241_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal lshr_ln3_fu_231_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal trunc_ln28_fu_213_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal lshr_ln2_fu_203_p4 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln39_fu_269_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln15_1_fu_291_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln15_fu_307_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln_fu_283_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln27_fu_199_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal lshr_ln_fu_189_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal or_ln15_3_fu_319_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln29_fu_227_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln15_2_fu_327_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln15_2_fu_299_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln15_3_fu_333_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln15_1_fu_313_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln15_2_fu_345_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_idle_pp0_1to1 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ready_sig : STD_LOGIC;
    signal ap_done_sig : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component sha256Accel_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component sha256Accel_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready_sig,
        ap_done => ap_done_sig,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage1,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage1)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    i_1_fu_70_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln10_fu_135_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    i_1_fu_70 <= add_ln10_fu_178_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_1_fu_70 <= ap_const_lv7_10;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                add_ln15_3_reg_405 <= add_ln15_3_fu_339_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln15_4_reg_410 <= add_ln15_4_fu_350_p2;
                i_reg_366 <= ap_sig_allocacmp_i;
                i_reg_366_pp0_iter1_reg <= i_reg_366;
                icmp_ln10_reg_371 <= icmp_ln10_fu_135_p2;
                trunc_ln10_reg_375 <= trunc_ln10_fu_141_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                wValues_load_reg_395 <= wValues_q0;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage1_subdone, ap_block_pp0_stage0_subdone, ap_idle_pp0_1to1, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_start_int = ap_const_logic_0) and (ap_idle_pp0_1to1 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    add_ln10_fu_178_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i) + unsigned(ap_const_lv7_1));
    add_ln12_fu_145_p2 <= std_logic_vector(unsigned(trunc_ln10_fu_141_p1) + unsigned(ap_const_lv6_31));
    add_ln13_fu_156_p2 <= std_logic_vector(unsigned(trunc_ln10_fu_141_p1) + unsigned(ap_const_lv6_3E));
    add_ln15_1_fu_273_p2 <= std_logic_vector(unsigned(trunc_ln10_reg_375) + unsigned(ap_const_lv6_30));
    add_ln15_2_fu_345_p2 <= std_logic_vector(unsigned(wValues_load_reg_395) + unsigned(wValues_q1));
    add_ln15_3_fu_339_p2 <= std_logic_vector(unsigned(xor_ln15_3_fu_333_p2) + unsigned(xor_ln15_1_fu_313_p2));
    add_ln15_4_fu_350_p2 <= std_logic_vector(unsigned(add_ln15_3_reg_405) + unsigned(add_ln15_2_fu_345_p2));
    add_ln15_fu_167_p2 <= std_logic_vector(unsigned(trunc_ln10_fu_141_p1) + unsigned(ap_const_lv6_39));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone, ap_enable_reg_pp0_iter0_reg, icmp_ln10_reg_371)
    begin
        if (((icmp_ln10_reg_371 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_condition_exit_pp0_iter0_stage1 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage1 <= ap_const_logic_0;
        end if; 
    end process;

    ap_done <= ap_done_sig;

    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to1_assign_proc : process(ap_enable_reg_pp0_iter1)
    begin
        if ((ap_enable_reg_pp0_iter1 = ap_const_logic_0)) then 
            ap_idle_pp0_1to1 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to1 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage1;
    ap_ready <= ap_ready_sig;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone, ap_enable_reg_pp0_iter0_reg)
    begin
        if (((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, i_1_fu_70, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_i <= ap_const_lv7_10;
        else 
            ap_sig_allocacmp_i <= i_1_fu_70;
        end if; 
    end process;

    icmp_ln10_fu_135_p2 <= "1" when (ap_sig_allocacmp_i = ap_const_lv7_40) else "0";
    lshr_ln2_fu_203_p4 <= wValues_q2(31 downto 18);
    lshr_ln3_fu_231_p4 <= wValues_q1(31 downto 17);
    lshr_ln4_fu_245_p4 <= wValues_q1(31 downto 19);
    lshr_ln_fu_189_p4 <= wValues_q2(31 downto 7);
    or_ln15_1_fu_291_p3 <= (trunc_ln37_fu_241_p1 & lshr_ln3_fu_231_p4);
    or_ln15_2_fu_299_p3 <= (trunc_ln28_fu_213_p1 & lshr_ln2_fu_203_p4);
    or_ln15_3_fu_319_p3 <= (trunc_ln27_fu_199_p1 & lshr_ln_fu_189_p4);
    or_ln_fu_283_p3 <= (trunc_ln38_fu_255_p1 & lshr_ln4_fu_245_p4);
    shr10_fu_259_p4 <= wValues_q1(31 downto 10);
    shr3_fu_217_p4 <= wValues_q2(31 downto 3);
    trunc_ln10_fu_141_p1 <= ap_sig_allocacmp_i(6 - 1 downto 0);
    trunc_ln27_fu_199_p1 <= wValues_q2(7 - 1 downto 0);
    trunc_ln28_fu_213_p1 <= wValues_q2(18 - 1 downto 0);
    trunc_ln37_fu_241_p1 <= wValues_q1(17 - 1 downto 0);
    trunc_ln38_fu_255_p1 <= wValues_q1(19 - 1 downto 0);
    wValues_address0 <= wValues_address0_local;

    wValues_address0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0, zext_ln15_fu_173_p1, ap_block_pp0_stage1, zext_ln10_fu_355_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            wValues_address0_local <= zext_ln10_fu_355_p1(6 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            wValues_address0_local <= zext_ln15_fu_173_p1(6 - 1 downto 0);
        else 
            wValues_address0_local <= "XXXXXX";
        end if; 
    end process;

    wValues_address1 <= wValues_address1_local;

    wValues_address1_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0_reg, ap_block_pp0_stage0, zext_ln13_fu_162_p1, zext_ln15_1_fu_278_p1, ap_block_pp0_stage1)
    begin
        if (((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            wValues_address1_local <= zext_ln15_1_fu_278_p1(6 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            wValues_address1_local <= zext_ln13_fu_162_p1(6 - 1 downto 0);
        else 
            wValues_address1_local <= "XXXXXX";
        end if; 
    end process;

    wValues_address2 <= zext_ln12_fu_151_p1(6 - 1 downto 0);
    wValues_ce0 <= wValues_ce0_local;

    wValues_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            wValues_ce0_local <= ap_const_logic_1;
        else 
            wValues_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    wValues_ce1 <= wValues_ce1_local;

    wValues_ce1_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0_reg, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            wValues_ce1_local <= ap_const_logic_1;
        else 
            wValues_ce1_local <= ap_const_logic_0;
        end if; 
    end process;

    wValues_ce2 <= wValues_ce2_local;

    wValues_ce2_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            wValues_ce2_local <= ap_const_logic_1;
        else 
            wValues_ce2_local <= ap_const_logic_0;
        end if; 
    end process;

    wValues_d0 <= add_ln15_4_reg_410;
    wValues_we0 <= wValues_we0_local;

    wValues_we0_local_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            wValues_we0_local <= ap_const_logic_1;
        else 
            wValues_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    xor_ln15_1_fu_313_p2 <= (xor_ln15_fu_307_p2 xor or_ln_fu_283_p3);
    xor_ln15_2_fu_327_p2 <= (zext_ln29_fu_227_p1 xor or_ln15_3_fu_319_p3);
    xor_ln15_3_fu_333_p2 <= (xor_ln15_2_fu_327_p2 xor or_ln15_2_fu_299_p3);
    xor_ln15_fu_307_p2 <= (zext_ln39_fu_269_p1 xor or_ln15_1_fu_291_p3);
    zext_ln10_fu_355_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_366_pp0_iter1_reg),64));
    zext_ln12_fu_151_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln12_fu_145_p2),64));
    zext_ln13_fu_162_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln13_fu_156_p2),64));
    zext_ln15_1_fu_278_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln15_1_fu_273_p2),64));
    zext_ln15_fu_173_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln15_fu_167_p2),64));
    zext_ln29_fu_227_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shr3_fu_217_p4),32));
    zext_ln39_fu_269_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shr10_fu_259_p4),32));
end behav;
