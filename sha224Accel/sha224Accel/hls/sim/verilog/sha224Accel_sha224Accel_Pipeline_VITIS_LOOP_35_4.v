// ==============================================================
// Generated by Vitis HLS v2025.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2025 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module sha224Accel_sha224Accel_Pipeline_VITIS_LOOP_35_4 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        buffer_15_address0,
        buffer_15_ce0,
        buffer_15_we0,
        buffer_15_d0,
        buffer_14_address0,
        buffer_14_ce0,
        buffer_14_we0,
        buffer_14_d0,
        buffer_13_address0,
        buffer_13_ce0,
        buffer_13_we0,
        buffer_13_d0,
        buffer_12_address0,
        buffer_12_ce0,
        buffer_12_we0,
        buffer_12_d0,
        buffer_11_address0,
        buffer_11_ce0,
        buffer_11_we0,
        buffer_11_d0,
        buffer_10_address0,
        buffer_10_ce0,
        buffer_10_we0,
        buffer_10_d0,
        buffer_9_address0,
        buffer_9_ce0,
        buffer_9_we0,
        buffer_9_d0,
        buffer_8_address0,
        buffer_8_ce0,
        buffer_8_we0,
        buffer_8_d0,
        buffer_7_address0,
        buffer_7_ce0,
        buffer_7_we0,
        buffer_7_d0,
        buffer_6_address0,
        buffer_6_ce0,
        buffer_6_we0,
        buffer_6_d0,
        buffer_5_address0,
        buffer_5_ce0,
        buffer_5_we0,
        buffer_5_d0,
        buffer_4_address0,
        buffer_4_ce0,
        buffer_4_we0,
        buffer_4_d0,
        buffer_3_address0,
        buffer_3_ce0,
        buffer_3_we0,
        buffer_3_d0,
        buffer_2_address0,
        buffer_2_ce0,
        buffer_2_we0,
        buffer_2_d0,
        buffer_1_address0,
        buffer_1_ce0,
        buffer_1_we0,
        buffer_1_d0,
        buffer_r_address0,
        buffer_r_ce0,
        buffer_r_we0,
        buffer_r_d0,
        size
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [4:0] buffer_15_address0;
output   buffer_15_ce0;
output   buffer_15_we0;
output  [0:0] buffer_15_d0;
output  [4:0] buffer_14_address0;
output   buffer_14_ce0;
output   buffer_14_we0;
output  [0:0] buffer_14_d0;
output  [4:0] buffer_13_address0;
output   buffer_13_ce0;
output   buffer_13_we0;
output  [0:0] buffer_13_d0;
output  [4:0] buffer_12_address0;
output   buffer_12_ce0;
output   buffer_12_we0;
output  [0:0] buffer_12_d0;
output  [4:0] buffer_11_address0;
output   buffer_11_ce0;
output   buffer_11_we0;
output  [0:0] buffer_11_d0;
output  [4:0] buffer_10_address0;
output   buffer_10_ce0;
output   buffer_10_we0;
output  [0:0] buffer_10_d0;
output  [4:0] buffer_9_address0;
output   buffer_9_ce0;
output   buffer_9_we0;
output  [0:0] buffer_9_d0;
output  [4:0] buffer_8_address0;
output   buffer_8_ce0;
output   buffer_8_we0;
output  [0:0] buffer_8_d0;
output  [4:0] buffer_7_address0;
output   buffer_7_ce0;
output   buffer_7_we0;
output  [0:0] buffer_7_d0;
output  [4:0] buffer_6_address0;
output   buffer_6_ce0;
output   buffer_6_we0;
output  [0:0] buffer_6_d0;
output  [4:0] buffer_5_address0;
output   buffer_5_ce0;
output   buffer_5_we0;
output  [0:0] buffer_5_d0;
output  [4:0] buffer_4_address0;
output   buffer_4_ce0;
output   buffer_4_we0;
output  [0:0] buffer_4_d0;
output  [4:0] buffer_3_address0;
output   buffer_3_ce0;
output   buffer_3_we0;
output  [0:0] buffer_3_d0;
output  [4:0] buffer_2_address0;
output   buffer_2_ce0;
output   buffer_2_we0;
output  [0:0] buffer_2_d0;
output  [4:0] buffer_1_address0;
output   buffer_1_ce0;
output   buffer_1_we0;
output  [0:0] buffer_1_d0;
output  [4:0] buffer_r_address0;
output   buffer_r_ce0;
output   buffer_r_we0;
output  [0:0] buffer_r_d0;
input  [63:0] size;

reg ap_idle;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_block_state1_pp0_stage0_iter0;
wire   [0:0] icmp_ln35_fu_339_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [63:0] zext_ln34_fu_370_p1;
reg   [6:0] sizeIndex_fu_104;
wire   [6:0] sizeIndex_1_fu_457_p2;
wire    ap_loop_init;
reg   [6:0] ap_sig_allocacmp_sizeIndex_load_1;
reg   [6:0] ap_sig_allocacmp_sizeIndex_load;
reg   [9:0] j_1_fu_108;
wire   [9:0] add_ln35_fu_451_p2;
reg   [9:0] ap_sig_allocacmp_j;
reg    buffer_14_we0_local;
wire   [3:0] trunc_ln35_1_fu_352_p1;
wire   [0:0] tmp_fu_390_p3;
reg    buffer_14_ce0_local;
reg    buffer_13_we0_local;
reg    buffer_13_ce0_local;
reg    buffer_12_we0_local;
reg    buffer_12_ce0_local;
reg    buffer_11_we0_local;
reg    buffer_11_ce0_local;
reg    buffer_10_we0_local;
reg    buffer_10_ce0_local;
reg    buffer_9_we0_local;
reg    buffer_9_ce0_local;
reg    buffer_8_we0_local;
reg    buffer_8_ce0_local;
reg    buffer_7_we0_local;
reg    buffer_7_ce0_local;
reg    buffer_6_we0_local;
reg    buffer_6_ce0_local;
reg    buffer_5_we0_local;
reg    buffer_5_ce0_local;
reg    buffer_4_we0_local;
reg    buffer_4_ce0_local;
reg    buffer_3_we0_local;
reg    buffer_3_ce0_local;
reg    buffer_2_we0_local;
reg    buffer_2_ce0_local;
reg    buffer_1_we0_local;
reg    buffer_1_ce0_local;
reg    buffer_r_we0_local;
reg    buffer_r_ce0_local;
reg    buffer_15_we0_local;
reg    buffer_15_ce0_local;
wire   [2:0] trunc_ln2_fu_356_p4;
wire  signed [4:0] sext_ln34_fu_366_p1;
wire   [5:0] tmp_fu_390_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
wire   [0:0] tmp_fu_390_p0;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 sizeIndex_fu_104 = 7'd0;
#0 j_1_fu_108 = 10'd0;
#0 ap_done_reg = 1'b0;
end

sha224Accel_bitselect_1ns_64ns_6ns_1_1_1 #(
    .DATAWIDTH( 64 ),
    .ADDRWIDTH( 6 ))
bitselect_1ns_64ns_6ns_1_1_1_U42(
    .din(size),
    .sel(tmp_fu_390_p2),
    .dout(tmp_fu_390_p3)
);

sha224Accel_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        if ((icmp_ln35_fu_339_p2 == 1'd0)) begin
            j_1_fu_108 <= add_ln35_fu_451_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            j_1_fu_108 <= 10'd448;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        if ((icmp_ln35_fu_339_p2 == 1'd0)) begin
            sizeIndex_fu_104 <= sizeIndex_1_fu_457_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            sizeIndex_fu_104 <= 7'd63;
        end
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1_pp0_stage0_iter0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln35_fu_339_p2 == 1'd1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_j = 10'd448;
    end else begin
        ap_sig_allocacmp_j = j_1_fu_108;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_sizeIndex_load = 7'd63;
    end else begin
        ap_sig_allocacmp_sizeIndex_load = sizeIndex_fu_104;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_sizeIndex_load_1 = 7'd63;
    end else begin
        ap_sig_allocacmp_sizeIndex_load_1 = sizeIndex_fu_104;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        buffer_10_ce0_local = 1'b1;
    end else begin
        buffer_10_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln35_fu_339_p2 == 1'd0) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1) & (trunc_ln35_1_fu_352_p1 == 4'd10))) begin
        buffer_10_we0_local = 1'b1;
    end else begin
        buffer_10_we0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        buffer_11_ce0_local = 1'b1;
    end else begin
        buffer_11_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln35_fu_339_p2 == 1'd0) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1) & (trunc_ln35_1_fu_352_p1 == 4'd11))) begin
        buffer_11_we0_local = 1'b1;
    end else begin
        buffer_11_we0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        buffer_12_ce0_local = 1'b1;
    end else begin
        buffer_12_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln35_fu_339_p2 == 1'd0) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1) & (trunc_ln35_1_fu_352_p1 == 4'd12))) begin
        buffer_12_we0_local = 1'b1;
    end else begin
        buffer_12_we0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        buffer_13_ce0_local = 1'b1;
    end else begin
        buffer_13_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln35_fu_339_p2 == 1'd0) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1) & (trunc_ln35_1_fu_352_p1 == 4'd13))) begin
        buffer_13_we0_local = 1'b1;
    end else begin
        buffer_13_we0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        buffer_14_ce0_local = 1'b1;
    end else begin
        buffer_14_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln35_fu_339_p2 == 1'd0) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1) & (trunc_ln35_1_fu_352_p1 == 4'd14))) begin
        buffer_14_we0_local = 1'b1;
    end else begin
        buffer_14_we0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        buffer_15_ce0_local = 1'b1;
    end else begin
        buffer_15_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln35_fu_339_p2 == 1'd0) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1) & (trunc_ln35_1_fu_352_p1 == 4'd15))) begin
        buffer_15_we0_local = 1'b1;
    end else begin
        buffer_15_we0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        buffer_1_ce0_local = 1'b1;
    end else begin
        buffer_1_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln35_fu_339_p2 == 1'd0) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1) & (trunc_ln35_1_fu_352_p1 == 4'd1))) begin
        buffer_1_we0_local = 1'b1;
    end else begin
        buffer_1_we0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        buffer_2_ce0_local = 1'b1;
    end else begin
        buffer_2_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln35_fu_339_p2 == 1'd0) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1) & (trunc_ln35_1_fu_352_p1 == 4'd2))) begin
        buffer_2_we0_local = 1'b1;
    end else begin
        buffer_2_we0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        buffer_3_ce0_local = 1'b1;
    end else begin
        buffer_3_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln35_fu_339_p2 == 1'd0) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1) & (trunc_ln35_1_fu_352_p1 == 4'd3))) begin
        buffer_3_we0_local = 1'b1;
    end else begin
        buffer_3_we0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        buffer_4_ce0_local = 1'b1;
    end else begin
        buffer_4_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln35_fu_339_p2 == 1'd0) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1) & (trunc_ln35_1_fu_352_p1 == 4'd4))) begin
        buffer_4_we0_local = 1'b1;
    end else begin
        buffer_4_we0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        buffer_5_ce0_local = 1'b1;
    end else begin
        buffer_5_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln35_fu_339_p2 == 1'd0) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1) & (trunc_ln35_1_fu_352_p1 == 4'd5))) begin
        buffer_5_we0_local = 1'b1;
    end else begin
        buffer_5_we0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        buffer_6_ce0_local = 1'b1;
    end else begin
        buffer_6_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln35_fu_339_p2 == 1'd0) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1) & (trunc_ln35_1_fu_352_p1 == 4'd6))) begin
        buffer_6_we0_local = 1'b1;
    end else begin
        buffer_6_we0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        buffer_7_ce0_local = 1'b1;
    end else begin
        buffer_7_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln35_fu_339_p2 == 1'd0) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1) & (trunc_ln35_1_fu_352_p1 == 4'd7))) begin
        buffer_7_we0_local = 1'b1;
    end else begin
        buffer_7_we0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        buffer_8_ce0_local = 1'b1;
    end else begin
        buffer_8_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln35_fu_339_p2 == 1'd0) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1) & (trunc_ln35_1_fu_352_p1 == 4'd8))) begin
        buffer_8_we0_local = 1'b1;
    end else begin
        buffer_8_we0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        buffer_9_ce0_local = 1'b1;
    end else begin
        buffer_9_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln35_fu_339_p2 == 1'd0) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1) & (trunc_ln35_1_fu_352_p1 == 4'd9))) begin
        buffer_9_we0_local = 1'b1;
    end else begin
        buffer_9_we0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        buffer_r_ce0_local = 1'b1;
    end else begin
        buffer_r_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln35_fu_339_p2 == 1'd0) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1) & (trunc_ln35_1_fu_352_p1 == 4'd0))) begin
        buffer_r_we0_local = 1'b1;
    end else begin
        buffer_r_we0_local = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln35_fu_451_p2 = (ap_sig_allocacmp_j + 10'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start_int == 1'b0);
end

assign ap_done = ap_done_sig;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = ap_ready_sig;

assign buffer_10_address0 = zext_ln34_fu_370_p1;

assign buffer_10_ce0 = buffer_10_ce0_local;

assign buffer_10_d0 = tmp_fu_390_p3;

assign buffer_10_we0 = buffer_10_we0_local;

assign buffer_11_address0 = zext_ln34_fu_370_p1;

assign buffer_11_ce0 = buffer_11_ce0_local;

assign buffer_11_d0 = tmp_fu_390_p3;

assign buffer_11_we0 = buffer_11_we0_local;

assign buffer_12_address0 = zext_ln34_fu_370_p1;

assign buffer_12_ce0 = buffer_12_ce0_local;

assign buffer_12_d0 = tmp_fu_390_p3;

assign buffer_12_we0 = buffer_12_we0_local;

assign buffer_13_address0 = zext_ln34_fu_370_p1;

assign buffer_13_ce0 = buffer_13_ce0_local;

assign buffer_13_d0 = tmp_fu_390_p3;

assign buffer_13_we0 = buffer_13_we0_local;

assign buffer_14_address0 = zext_ln34_fu_370_p1;

assign buffer_14_ce0 = buffer_14_ce0_local;

assign buffer_14_d0 = tmp_fu_390_p3;

assign buffer_14_we0 = buffer_14_we0_local;

assign buffer_15_address0 = zext_ln34_fu_370_p1;

assign buffer_15_ce0 = buffer_15_ce0_local;

assign buffer_15_d0 = tmp_fu_390_p3;

assign buffer_15_we0 = buffer_15_we0_local;

assign buffer_1_address0 = zext_ln34_fu_370_p1;

assign buffer_1_ce0 = buffer_1_ce0_local;

assign buffer_1_d0 = tmp_fu_390_p3;

assign buffer_1_we0 = buffer_1_we0_local;

assign buffer_2_address0 = zext_ln34_fu_370_p1;

assign buffer_2_ce0 = buffer_2_ce0_local;

assign buffer_2_d0 = tmp_fu_390_p3;

assign buffer_2_we0 = buffer_2_we0_local;

assign buffer_3_address0 = zext_ln34_fu_370_p1;

assign buffer_3_ce0 = buffer_3_ce0_local;

assign buffer_3_d0 = tmp_fu_390_p3;

assign buffer_3_we0 = buffer_3_we0_local;

assign buffer_4_address0 = zext_ln34_fu_370_p1;

assign buffer_4_ce0 = buffer_4_ce0_local;

assign buffer_4_d0 = tmp_fu_390_p3;

assign buffer_4_we0 = buffer_4_we0_local;

assign buffer_5_address0 = zext_ln34_fu_370_p1;

assign buffer_5_ce0 = buffer_5_ce0_local;

assign buffer_5_d0 = tmp_fu_390_p3;

assign buffer_5_we0 = buffer_5_we0_local;

assign buffer_6_address0 = zext_ln34_fu_370_p1;

assign buffer_6_ce0 = buffer_6_ce0_local;

assign buffer_6_d0 = tmp_fu_390_p3;

assign buffer_6_we0 = buffer_6_we0_local;

assign buffer_7_address0 = zext_ln34_fu_370_p1;

assign buffer_7_ce0 = buffer_7_ce0_local;

assign buffer_7_d0 = tmp_fu_390_p3;

assign buffer_7_we0 = buffer_7_we0_local;

assign buffer_8_address0 = zext_ln34_fu_370_p1;

assign buffer_8_ce0 = buffer_8_ce0_local;

assign buffer_8_d0 = tmp_fu_390_p3;

assign buffer_8_we0 = buffer_8_we0_local;

assign buffer_9_address0 = zext_ln34_fu_370_p1;

assign buffer_9_ce0 = buffer_9_ce0_local;

assign buffer_9_d0 = tmp_fu_390_p3;

assign buffer_9_we0 = buffer_9_we0_local;

assign buffer_r_address0 = zext_ln34_fu_370_p1;

assign buffer_r_ce0 = buffer_r_ce0_local;

assign buffer_r_d0 = tmp_fu_390_p3;

assign buffer_r_we0 = buffer_r_we0_local;

assign icmp_ln35_fu_339_p2 = ((ap_sig_allocacmp_j == 10'd512) ? 1'b1 : 1'b0);

assign sext_ln34_fu_366_p1 = $signed(trunc_ln2_fu_356_p4);

assign sizeIndex_1_fu_457_p2 = ($signed(ap_sig_allocacmp_sizeIndex_load) + $signed(7'd127));

assign tmp_fu_390_p2 = ap_sig_allocacmp_sizeIndex_load_1[5:0];

assign trunc_ln2_fu_356_p4 = {{ap_sig_allocacmp_j[6:4]}};

assign trunc_ln35_1_fu_352_p1 = ap_sig_allocacmp_j[3:0];

assign zext_ln34_fu_370_p1 = $unsigned(sext_ln34_fu_366_p1);

endmodule //sha224Accel_sha224Accel_Pipeline_VITIS_LOOP_35_4
