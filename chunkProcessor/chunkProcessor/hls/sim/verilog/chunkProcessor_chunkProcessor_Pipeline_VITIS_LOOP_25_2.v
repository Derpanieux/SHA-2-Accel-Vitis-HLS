// ==============================================================
// Generated by Vitis HLS v2025.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2025 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module chunkProcessor_chunkProcessor_Pipeline_VITIS_LOOP_25_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        wvars_load_7,
        wvars_load_6,
        wvars_load_5,
        wvars_load_4,
        wvars_load_3,
        wvars_load_2,
        wvars_load_1,
        wvars_load,
        wValues_address0,
        wValues_ce0,
        wValues_q0,
        thr_add562568_out,
        thr_add562568_out_ap_vld,
        add_i26_i231347_out,
        add_i26_i231347_out_ap_vld,
        thr_add56256_out,
        thr_add56256_out_ap_vld,
        thr_add5625_out,
        thr_add5625_out_ap_vld,
        add_i26_i23134_out,
        add_i26_i23134_out_ap_vld,
        add_i26_i2313_out,
        add_i26_i2313_out_ap_vld,
        thr_add562_out,
        thr_add562_out_ap_vld,
        add_i26_i231_out,
        add_i26_i231_out_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 2'd1;
parameter    ap_ST_fsm_pp0_stage1 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] wvars_load_7;
input  [31:0] wvars_load_6;
input  [31:0] wvars_load_5;
input  [31:0] wvars_load_4;
input  [31:0] wvars_load_3;
input  [31:0] wvars_load_2;
input  [31:0] wvars_load_1;
input  [31:0] wvars_load;
output  [5:0] wValues_address0;
output   wValues_ce0;
input  [31:0] wValues_q0;
output  [31:0] thr_add562568_out;
output   thr_add562568_out_ap_vld;
output  [31:0] add_i26_i231347_out;
output   add_i26_i231347_out_ap_vld;
output  [31:0] thr_add56256_out;
output   thr_add56256_out_ap_vld;
output  [31:0] thr_add5625_out;
output   thr_add5625_out_ap_vld;
output  [31:0] add_i26_i23134_out;
output   add_i26_i23134_out_ap_vld;
output  [31:0] add_i26_i2313_out;
output   add_i26_i2313_out_ap_vld;
output  [31:0] thr_add562_out;
output   thr_add562_out_ap_vld;
output  [31:0] add_i26_i231_out;
output   add_i26_i231_out_ap_vld;

reg ap_idle;
reg thr_add562568_out_ap_vld;
reg add_i26_i231347_out_ap_vld;
reg thr_add56256_out_ap_vld;
reg thr_add5625_out_ap_vld;
reg add_i26_i23134_out_ap_vld;
reg add_i26_i2313_out_ap_vld;
reg thr_add562_out_ap_vld;
reg add_i26_i231_out_ap_vld;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_pp0_stage1_subdone;
reg    ap_enable_reg_pp0_iter0_reg;
reg   [0:0] icmp_ln25_reg_724;
reg    ap_condition_exit_pp0_iter0_stage1;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [5:0] kValues_address0;
wire   [31:0] kValues_q0;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln25_fu_318_p2;
reg   [0:0] icmp_ln25_reg_724_pp0_iter1_reg;
wire   [31:0] add_ln13_fu_341_p2;
reg   [31:0] add_ln13_reg_738;
wire    ap_block_pp0_stage1_11001;
reg   [31:0] thr_add562_load_reg_743;
reg   [31:0] thr_add56256_load_reg_755;
wire   [31:0] t1_fu_482_p2;
reg   [31:0] t1_reg_762;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_exit_pp0_iter1_stage0;
wire   [63:0] zext_ln25_fu_330_p1;
wire    ap_block_pp0_stage0;
reg   [6:0] i_fu_104;
wire   [6:0] add_ln25_fu_324_p2;
wire    ap_loop_init;
reg   [6:0] ap_sig_allocacmp_i_3;
reg   [31:0] add_i26_i2313_fu_108;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_idle_pp0_0to0;
reg   [31:0] thr_add5625_fu_112;
wire    ap_block_pp0_stage1;
reg   [31:0] thr_add562_fu_116;
wire   [31:0] add_ln15_1_fu_607_p2;
reg   [31:0] add_i26_i231347_fu_120;
reg   [31:0] thr_add562568_fu_124;
reg   [31:0] add_i26_i231_fu_128;
wire   [31:0] add_ln19_fu_613_p2;
reg   [31:0] add_i26_i23134_fu_132;
reg   [31:0] thr_add56256_fu_136;
wire    ap_block_pp0_stage0_01001;
reg    kValues_ce0_local;
reg    wValues_ce0_local;
wire   [31:0] xor_ln13_fu_411_p2;
wire   [5:0] trunc_ln17_fu_379_p1;
wire   [25:0] lshr_ln4_fu_369_p4;
wire   [10:0] trunc_ln18_fu_393_p1;
wire   [20:0] lshr_ln5_fu_383_p4;
wire   [31:0] and_ln13_fu_417_p2;
wire   [31:0] and_ln13_1_fu_423_p2;
wire   [24:0] trunc_ln19_fu_407_p1;
wire   [6:0] lshr_ln6_fu_397_p4;
wire   [31:0] or_ln13_1_fu_437_p3;
wire   [31:0] or_ln13_3_fu_451_p3;
wire   [31:0] xor_ln13_1_fu_459_p2;
wire   [31:0] or_ln1_fu_429_p3;
wire   [31:0] or_ln13_fu_445_p2;
wire   [31:0] xor_ln13_2_fu_465_p2;
wire   [31:0] add_ln13_2_fu_476_p2;
wire   [31:0] add_ln13_1_fu_471_p2;
wire   [31:0] or_ln15_fu_545_p2;
wire   [1:0] trunc_ln7_fu_518_p1;
wire   [29:0] lshr_ln7_fu_509_p4;
wire   [12:0] trunc_ln8_fu_530_p1;
wire   [18:0] lshr_ln8_fu_521_p4;
wire   [31:0] and_ln15_fu_550_p2;
wire   [31:0] and_ln15_1_fu_555_p2;
wire   [21:0] trunc_ln9_fu_542_p1;
wire   [9:0] lshr_ln9_fu_533_p4;
wire   [31:0] or_ln15_6_fu_568_p3;
wire   [31:0] or_ln15_8_fu_582_p3;
wire   [31:0] xor_ln15_fu_590_p2;
wire   [31:0] or_ln15_5_fu_560_p3;
wire   [31:0] or_ln15_1_fu_576_p2;
wire   [31:0] add_ln15_fu_602_p2;
wire   [31:0] xor_ln15_1_fu_596_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [1:0] ap_NS_fsm;
reg    ap_idle_pp0_1to1;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 i_fu_104 = 7'd0;
#0 add_i26_i2313_fu_108 = 32'd0;
#0 thr_add5625_fu_112 = 32'd0;
#0 thr_add562_fu_116 = 32'd0;
#0 add_i26_i231347_fu_120 = 32'd0;
#0 thr_add562568_fu_124 = 32'd0;
#0 add_i26_i231_fu_128 = 32'd0;
#0 add_i26_i23134_fu_132 = 32'd0;
#0 thr_add56256_fu_136 = 32'd0;
#0 ap_done_reg = 1'b0;
end

chunkProcessor_chunkProcessor_Pipeline_VITIS_LOOP_25_2_kValues_ROM_AUTO_1R #(
    .DataWidth( 32 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
kValues_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(kValues_address0),
    .ce0(kValues_ce0_local),
    .q0(kValues_q0)
);

chunkProcessor_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage1),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            add_i26_i231347_fu_120 <= wvars_load_6;
        end else if (((icmp_ln25_reg_724 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            add_i26_i231347_fu_120 <= add_i26_i23134_fu_132;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            add_i26_i23134_fu_132 <= wvars_load_3;
        end else if (((icmp_ln25_reg_724 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            add_i26_i23134_fu_132 <= add_i26_i2313_fu_108;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            add_i26_i2313_fu_108 <= wvars_load_2;
        end else if (((icmp_ln25_reg_724 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            add_i26_i2313_fu_108 <= add_i26_i231_fu_128;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        add_i26_i231_fu_128 <= wvars_load;
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln25_reg_724_pp0_iter1_reg == 1'd0))) begin
        add_i26_i231_fu_128 <= add_ln19_fu_613_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((ap_loop_exit_ready == 1'b0) & (1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b1 == ap_condition_exit_pp0_iter1_stage0) & (ap_idle_pp0_0to0 == 1'b1)))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= 1'b0;
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln25_fu_318_p2 == 1'd0))) begin
            i_fu_104 <= add_ln25_fu_324_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_104 <= 7'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        thr_add562568_fu_124 <= wvars_load_7;
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln25_reg_724_pp0_iter1_reg == 1'd0))) begin
        thr_add562568_fu_124 <= thr_add56256_load_reg_755;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        thr_add56256_fu_136 <= wvars_load_5;
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln25_reg_724_pp0_iter1_reg == 1'd0))) begin
        thr_add56256_fu_136 <= thr_add5625_fu_112;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        thr_add5625_fu_112 <= wvars_load_4;
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln25_reg_724_pp0_iter1_reg == 1'd0))) begin
        thr_add5625_fu_112 <= thr_add562_load_reg_743;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        thr_add562_fu_116 <= wvars_load_1;
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln25_reg_724_pp0_iter1_reg == 1'd0))) begin
        thr_add562_fu_116 <= add_ln15_1_fu_607_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        add_ln13_reg_738 <= add_ln13_fu_341_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln25_reg_724 <= icmp_ln25_fu_318_p2;
        icmp_ln25_reg_724_pp0_iter1_reg <= icmp_ln25_reg_724;
        t1_reg_762 <= t1_fu_482_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        thr_add56256_load_reg_755 <= thr_add56256_fu_136;
        thr_add562_load_reg_743 <= thr_add562_fu_116;
    end
end

always @ (*) begin
    if (((icmp_ln25_reg_724 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1))) begin
        add_i26_i231347_out_ap_vld = 1'b1;
    end else begin
        add_i26_i231347_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln25_reg_724 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1))) begin
        add_i26_i23134_out_ap_vld = 1'b1;
    end else begin
        add_i26_i23134_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln25_reg_724 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1))) begin
        add_i26_i2313_out_ap_vld = 1'b1;
    end else begin
        add_i26_i2313_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln25_reg_724 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1))) begin
        add_i26_i231_out_ap_vld = 1'b1;
    end else begin
        add_i26_i231_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln25_reg_724 == 1'd1) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln25_reg_724 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b0)) begin
        ap_idle_pp0_0to0 = 1'b1;
    end else begin
        ap_idle_pp0_0to0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b0)) begin
        ap_idle_pp0_1to1 = 1'b1;
    end else begin
        ap_idle_pp0_1to1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i_3 = 7'd0;
    end else begin
        ap_sig_allocacmp_i_3 = i_fu_104;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        kValues_ce0_local = 1'b1;
    end else begin
        kValues_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln25_reg_724 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1))) begin
        thr_add562568_out_ap_vld = 1'b1;
    end else begin
        thr_add562568_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln25_reg_724 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1))) begin
        thr_add56256_out_ap_vld = 1'b1;
    end else begin
        thr_add56256_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln25_reg_724 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1))) begin
        thr_add5625_out_ap_vld = 1'b1;
    end else begin
        thr_add5625_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln25_reg_724 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1))) begin
        thr_add562_out_ap_vld = 1'b1;
    end else begin
        thr_add562_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        wValues_ce0_local = 1'b1;
    end else begin
        wValues_ce0_local = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if (((1'b1 == ap_condition_exit_pp0_iter1_stage0) & (ap_idle_pp0_0to0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to1 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_i26_i231347_out = add_i26_i231347_fu_120;

assign add_i26_i23134_out = add_i26_i23134_fu_132;

assign add_i26_i2313_out = add_i26_i2313_fu_108;

assign add_i26_i231_out = add_i26_i231_fu_128;

assign add_ln13_1_fu_471_p2 = (add_ln13_reg_738 + add_i26_i231347_fu_120);

assign add_ln13_2_fu_476_p2 = (or_ln13_fu_445_p2 + xor_ln13_2_fu_465_p2);

assign add_ln13_fu_341_p2 = (kValues_q0 + wValues_q0);

assign add_ln15_1_fu_607_p2 = (add_ln15_fu_602_p2 + xor_ln15_1_fu_596_p2);

assign add_ln15_fu_602_p2 = (t1_reg_762 + or_ln15_1_fu_576_p2);

assign add_ln19_fu_613_p2 = (t1_reg_762 + thr_add562568_fu_124);

assign add_ln25_fu_324_p2 = (ap_sig_allocacmp_i_3 + 7'd1);

assign and_ln13_1_fu_423_p2 = (add_i26_i231_fu_128 & add_i26_i2313_fu_108);

assign and_ln13_fu_417_p2 = (xor_ln13_fu_411_p2 & add_i26_i23134_fu_132);

assign and_ln15_1_fu_555_p2 = (thr_add5625_fu_112 & thr_add56256_load_reg_755);

assign and_ln15_fu_550_p2 = (thr_add562_load_reg_743 & or_ln15_fu_545_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_done = ap_done_sig;

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage1;

assign ap_ready = ap_ready_sig;

assign icmp_ln25_fu_318_p2 = ((ap_sig_allocacmp_i_3 == 7'd64) ? 1'b1 : 1'b0);

assign kValues_address0 = zext_ln25_fu_330_p1;

assign lshr_ln4_fu_369_p4 = {{add_i26_i231_fu_128[31:6]}};

assign lshr_ln5_fu_383_p4 = {{add_i26_i231_fu_128[31:11]}};

assign lshr_ln6_fu_397_p4 = {{add_i26_i231_fu_128[31:25]}};

assign lshr_ln7_fu_509_p4 = {{thr_add562_load_reg_743[31:2]}};

assign lshr_ln8_fu_521_p4 = {{thr_add562_load_reg_743[31:13]}};

assign lshr_ln9_fu_533_p4 = {{thr_add562_load_reg_743[31:22]}};

assign or_ln13_1_fu_437_p3 = {{trunc_ln18_fu_393_p1}, {lshr_ln5_fu_383_p4}};

assign or_ln13_3_fu_451_p3 = {{trunc_ln19_fu_407_p1}, {lshr_ln6_fu_397_p4}};

assign or_ln13_fu_445_p2 = (and_ln13_fu_417_p2 | and_ln13_1_fu_423_p2);

assign or_ln15_1_fu_576_p2 = (and_ln15_fu_550_p2 | and_ln15_1_fu_555_p2);

assign or_ln15_5_fu_560_p3 = {{trunc_ln7_fu_518_p1}, {lshr_ln7_fu_509_p4}};

assign or_ln15_6_fu_568_p3 = {{trunc_ln8_fu_530_p1}, {lshr_ln8_fu_521_p4}};

assign or_ln15_8_fu_582_p3 = {{trunc_ln9_fu_542_p1}, {lshr_ln9_fu_533_p4}};

assign or_ln15_fu_545_p2 = (thr_add5625_fu_112 | thr_add56256_load_reg_755);

assign or_ln1_fu_429_p3 = {{trunc_ln17_fu_379_p1}, {lshr_ln4_fu_369_p4}};

assign t1_fu_482_p2 = (add_ln13_2_fu_476_p2 + add_ln13_1_fu_471_p2);

assign thr_add562568_out = thr_add562568_fu_124;

assign thr_add56256_out = thr_add56256_fu_136;

assign thr_add5625_out = thr_add5625_fu_112;

assign thr_add562_out = thr_add562_fu_116;

assign trunc_ln17_fu_379_p1 = add_i26_i231_fu_128[5:0];

assign trunc_ln18_fu_393_p1 = add_i26_i231_fu_128[10:0];

assign trunc_ln19_fu_407_p1 = add_i26_i231_fu_128[24:0];

assign trunc_ln7_fu_518_p1 = thr_add562_load_reg_743[1:0];

assign trunc_ln8_fu_530_p1 = thr_add562_load_reg_743[12:0];

assign trunc_ln9_fu_542_p1 = thr_add562_load_reg_743[21:0];

assign wValues_address0 = zext_ln25_fu_330_p1;

assign wValues_ce0 = wValues_ce0_local;

assign xor_ln13_1_fu_459_p2 = (or_ln13_3_fu_451_p3 ^ or_ln13_1_fu_437_p3);

assign xor_ln13_2_fu_465_p2 = (xor_ln13_1_fu_459_p2 ^ or_ln1_fu_429_p3);

assign xor_ln13_fu_411_p2 = (32'd4294967295 ^ add_i26_i231_fu_128);

assign xor_ln15_1_fu_596_p2 = (xor_ln15_fu_590_p2 ^ or_ln15_5_fu_560_p3);

assign xor_ln15_fu_590_p2 = (or_ln15_8_fu_582_p3 ^ or_ln15_6_fu_568_p3);

assign zext_ln25_fu_330_p1 = ap_sig_allocacmp_i_3;

endmodule //chunkProcessor_chunkProcessor_Pipeline_VITIS_LOOP_25_2
