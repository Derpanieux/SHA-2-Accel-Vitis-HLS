-- ==============================================================
-- Generated by Vitis HLS v2025.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2025 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity sha512Accel_chunkProcessor_Pipeline_VITIS_LOOP_27_2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    wvars_load_7 : IN STD_LOGIC_VECTOR (63 downto 0);
    wvars_load_6 : IN STD_LOGIC_VECTOR (63 downto 0);
    wvars_load_5 : IN STD_LOGIC_VECTOR (63 downto 0);
    wvars_load_4 : IN STD_LOGIC_VECTOR (63 downto 0);
    wvars_load_3 : IN STD_LOGIC_VECTOR (63 downto 0);
    wvars_load_2 : IN STD_LOGIC_VECTOR (63 downto 0);
    wvars_load_1 : IN STD_LOGIC_VECTOR (63 downto 0);
    wvars_load : IN STD_LOGIC_VECTOR (63 downto 0);
    wValues_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    wValues_ce0 : OUT STD_LOGIC;
    wValues_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    thr_add562568_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    thr_add562568_out_ap_vld : OUT STD_LOGIC;
    add_i26_i251347_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    add_i26_i251347_out_ap_vld : OUT STD_LOGIC;
    thr_add56256_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    thr_add56256_out_ap_vld : OUT STD_LOGIC;
    thr_add5625_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    thr_add5625_out_ap_vld : OUT STD_LOGIC;
    add_i26_i25134_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    add_i26_i25134_out_ap_vld : OUT STD_LOGIC;
    add_i26_i2513_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    add_i26_i2513_out_ap_vld : OUT STD_LOGIC;
    thr_add562_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    thr_add562_out_ap_vld : OUT STD_LOGIC;
    add_i26_i251_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    add_i26_i251_out_ap_vld : OUT STD_LOGIC );
end;


architecture behav of sha512Accel_chunkProcessor_Pipeline_VITIS_LOOP_27_2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv7_50 : STD_LOGIC_VECTOR (6 downto 0) := "1010000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv64_FFFFFFFFFFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "1111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal icmp_ln27_reg_715 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage1 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal kValues_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal kValues_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln27_fu_320_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln27_reg_715_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_i26_i251_load_reg_729 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal add_i26_i25134_load_reg_740 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln13_fu_370_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln13_reg_746 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln13_fu_376_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln13_reg_751 : STD_LOGIC_VECTOR (63 downto 0);
    signal thr_add562_load_reg_756 : STD_LOGIC_VECTOR (63 downto 0);
    signal thr_add56256_load_reg_767 : STD_LOGIC_VECTOR (63 downto 0);
    signal thr_add5625_load_reg_774 : STD_LOGIC_VECTOR (63 downto 0);
    signal t1_fu_488_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal t1_reg_780 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal zext_ln27_fu_332_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal i_fu_106 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    signal add_ln27_fu_326_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_i_3 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_i26_i2513_fu_110 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_idle_pp0_0to0 : STD_LOGIC;
    signal thr_add5625_fu_114 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal thr_add562_fu_118 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal add_ln15_2_fu_607_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_i26_i251347_fu_122 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal thr_add562568_fu_126 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal add_i26_i251_fu_130 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal add_ln19_fu_613_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_sig_allocacmp_add_i26_i251_load : STD_LOGIC_VECTOR (63 downto 0);
    signal add_i26_i25134_fu_134 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal thr_add56256_fu_138 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal kValues_ce0_local : STD_LOGIC;
    signal wValues_ce0_local : STD_LOGIC;
    signal xor_ln13_fu_352_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln13_fu_358_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln13_1_fu_364_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln17_fu_415_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal lshr_ln5_fu_406_p4 : STD_LOGIC_VECTOR (49 downto 0);
    signal trunc_ln18_fu_427_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal lshr_ln6_fu_418_p4 : STD_LOGIC_VECTOR (45 downto 0);
    signal trunc_ln19_fu_439_p1 : STD_LOGIC_VECTOR (40 downto 0);
    signal lshr_ln_fu_430_p4 : STD_LOGIC_VECTOR (22 downto 0);
    signal or_ln13_1_fu_450_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln13_3_fu_458_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln13_1_fu_466_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln2_fu_442_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln13_2_fu_472_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln13_2_fu_483_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln13_1_fu_478_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln15_fu_547_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln7_fu_520_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal lshr_ln7_fu_511_p4 : STD_LOGIC_VECTOR (35 downto 0);
    signal trunc_ln8_fu_532_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal lshr_ln8_fu_523_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal and_ln15_fu_551_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln15_1_fu_556_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln9_fu_544_p1 : STD_LOGIC_VECTOR (38 downto 0);
    signal lshr_ln9_fu_535_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal or_ln15_2_fu_568_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln15_4_fu_582_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln15_fu_590_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln15_1_fu_560_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln15_3_fu_576_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln15_fu_602_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln15_1_fu_596_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_idle_pp0_1to1 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ready_sig : STD_LOGIC;
    signal ap_done_sig : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component sha512Accel_chunkProcessor_Pipeline_VITIS_LOOP_27_2_kValues_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component sha512Accel_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    kValues_U : component sha512Accel_chunkProcessor_Pipeline_VITIS_LOOP_27_2_kValues_ROM_AUTO_1R
    generic map (
        DataWidth => 64,
        AddressRange => 80,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => kValues_address0,
        ce0 => kValues_ce0_local,
        q0 => kValues_q0);

    flow_control_loop_pipe_sequential_init_U : component sha512Accel_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready_sig,
        ap_done => ap_done_sig,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage1,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    add_i26_i251347_fu_122_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    add_i26_i251347_fu_122 <= wvars_load_6;
                elsif (((icmp_ln27_reg_715 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    add_i26_i251347_fu_122 <= add_i26_i25134_load_reg_740;
                end if;
            end if; 
        end if;
    end process;

    add_i26_i25134_fu_134_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                add_i26_i25134_fu_134 <= wvars_load_3;
            elsif (((icmp_ln27_reg_715 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                add_i26_i25134_fu_134 <= add_i26_i2513_fu_110;
            end if; 
        end if;
    end process;

    add_i26_i2513_fu_110_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                add_i26_i2513_fu_110 <= wvars_load_2;
            elsif (((icmp_ln27_reg_715 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                add_i26_i2513_fu_110 <= ap_sig_allocacmp_add_i26_i251_load;
            end if; 
        end if;
    end process;

    add_i26_i251_fu_130_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                add_i26_i251_fu_130 <= wvars_load;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln27_reg_715_pp0_iter1_reg = ap_const_lv1_0))) then 
                add_i26_i251_fu_130 <= add_ln19_fu_613_p2;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter1_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_loop_exit_ready = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0) and (ap_idle_pp0_0to0 = ap_const_logic_1)))) then 
                ap_loop_exit_ready_pp0_iter1_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
            end if; 
        end if;
    end process;

    i_fu_106_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln27_fu_320_p2 = ap_const_lv1_0))) then 
                    i_fu_106 <= add_ln27_fu_326_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_106 <= ap_const_lv7_0;
                end if;
            end if; 
        end if;
    end process;

    thr_add562568_fu_126_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                thr_add562568_fu_126 <= wvars_load_7;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln27_reg_715_pp0_iter1_reg = ap_const_lv1_0))) then 
                thr_add562568_fu_126 <= thr_add56256_load_reg_767;
            end if; 
        end if;
    end process;

    thr_add56256_fu_138_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    thr_add56256_fu_138 <= wvars_load_5;
                elsif (((icmp_ln27_reg_715 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    thr_add56256_fu_138 <= thr_add5625_fu_114;
                end if;
            end if; 
        end if;
    end process;

    thr_add5625_fu_114_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    thr_add5625_fu_114 <= wvars_load_4;
                elsif (((icmp_ln27_reg_715 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    thr_add5625_fu_114 <= thr_add562_fu_118;
                end if;
            end if; 
        end if;
    end process;

    thr_add562_fu_118_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                thr_add562_fu_118 <= wvars_load_1;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln27_reg_715_pp0_iter1_reg = ap_const_lv1_0))) then 
                thr_add562_fu_118 <= add_ln15_2_fu_607_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                add_i26_i25134_load_reg_740 <= add_i26_i25134_fu_134;
                add_i26_i251_load_reg_729 <= ap_sig_allocacmp_add_i26_i251_load;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                add_ln13_reg_751 <= add_ln13_fu_376_p2;
                or_ln13_reg_746 <= or_ln13_fu_370_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln27_reg_715 <= icmp_ln27_fu_320_p2;
                icmp_ln27_reg_715_pp0_iter1_reg <= icmp_ln27_reg_715;
                t1_reg_780 <= t1_fu_488_p2;
                thr_add5625_load_reg_774 <= thr_add5625_fu_114;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                thr_add56256_load_reg_767 <= thr_add56256_fu_138;
                thr_add562_load_reg_756 <= thr_add562_fu_118;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage1_subdone, ap_block_pp0_stage0_subdone, ap_condition_exit_pp0_iter1_stage0, ap_idle_pp0_0to0, ap_idle_pp0_1to1, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if (((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0) and (ap_idle_pp0_0to0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((not(((ap_start_int = ap_const_logic_0) and (ap_idle_pp0_1to1 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    add_i26_i251347_out <= add_i26_i251347_fu_122;

    add_i26_i251347_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln27_reg_715, ap_block_pp0_stage0_11001, ap_loop_exit_ready_pp0_iter1_reg)
    begin
        if (((icmp_ln27_reg_715 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1))) then 
            add_i26_i251347_out_ap_vld <= ap_const_logic_1;
        else 
            add_i26_i251347_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    add_i26_i25134_out <= add_i26_i25134_load_reg_740;

    add_i26_i25134_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln27_reg_715, ap_block_pp0_stage0_11001, ap_loop_exit_ready_pp0_iter1_reg)
    begin
        if (((icmp_ln27_reg_715 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1))) then 
            add_i26_i25134_out_ap_vld <= ap_const_logic_1;
        else 
            add_i26_i25134_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    add_i26_i2513_out <= add_i26_i2513_fu_110;

    add_i26_i2513_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln27_reg_715, ap_block_pp0_stage0_11001, ap_loop_exit_ready_pp0_iter1_reg)
    begin
        if (((icmp_ln27_reg_715 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1))) then 
            add_i26_i2513_out_ap_vld <= ap_const_logic_1;
        else 
            add_i26_i2513_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    add_i26_i251_out <= add_i26_i251_load_reg_729;

    add_i26_i251_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln27_reg_715, ap_block_pp0_stage0_11001, ap_loop_exit_ready_pp0_iter1_reg)
    begin
        if (((icmp_ln27_reg_715 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1))) then 
            add_i26_i251_out_ap_vld <= ap_const_logic_1;
        else 
            add_i26_i251_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    add_ln13_1_fu_478_p2 <= std_logic_vector(unsigned(add_ln13_reg_751) + unsigned(add_i26_i251347_fu_122));
    add_ln13_2_fu_483_p2 <= std_logic_vector(unsigned(or_ln13_reg_746) + unsigned(xor_ln13_2_fu_472_p2));
    add_ln13_fu_376_p2 <= std_logic_vector(unsigned(kValues_q0) + unsigned(wValues_q0));
    add_ln15_2_fu_607_p2 <= std_logic_vector(unsigned(add_ln15_fu_602_p2) + unsigned(xor_ln15_1_fu_596_p2));
    add_ln15_fu_602_p2 <= std_logic_vector(unsigned(t1_reg_780) + unsigned(or_ln15_3_fu_576_p2));
    add_ln19_fu_613_p2 <= std_logic_vector(unsigned(t1_reg_780) + unsigned(thr_add562568_fu_126));
    add_ln27_fu_326_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_3) + unsigned(ap_const_lv7_1));
    and_ln13_1_fu_364_p2 <= (ap_sig_allocacmp_add_i26_i251_load and add_i26_i2513_fu_110);
    and_ln13_fu_358_p2 <= (xor_ln13_fu_352_p2 and add_i26_i25134_fu_134);
    and_ln15_1_fu_556_p2 <= (thr_add5625_load_reg_774 and thr_add56256_load_reg_767);
    and_ln15_fu_551_p2 <= (thr_add562_load_reg_756 and or_ln15_fu_547_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone, ap_enable_reg_pp0_iter0_reg, icmp_ln27_reg_715)
    begin
        if (((icmp_ln27_reg_715 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_condition_exit_pp0_iter0_stage1 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln27_reg_715, ap_block_pp0_stage0_subdone)
    begin
        if (((icmp_ln27_reg_715 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_done <= ap_done_sig;

    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_loop_exit_ready_pp0_iter1_reg, ap_done_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to0_assign_proc : process(ap_enable_reg_pp0_iter0)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_0)) then 
            ap_idle_pp0_0to0 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to1_assign_proc : process(ap_enable_reg_pp0_iter1)
    begin
        if ((ap_enable_reg_pp0_iter1 = ap_const_logic_0)) then 
            ap_idle_pp0_1to1 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to1 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage1;
    ap_ready <= ap_ready_sig;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone, ap_enable_reg_pp0_iter0_reg)
    begin
        if (((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_add_i26_i251_load_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, icmp_ln27_reg_715_pp0_iter1_reg, ap_block_pp0_stage1, add_i26_i251_fu_130, add_ln19_fu_613_p2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln27_reg_715_pp0_iter1_reg = ap_const_lv1_0))) then 
            ap_sig_allocacmp_add_i26_i251_load <= add_ln19_fu_613_p2;
        else 
            ap_sig_allocacmp_add_i26_i251_load <= add_i26_i251_fu_130;
        end if; 
    end process;


    ap_sig_allocacmp_i_3_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, i_fu_106, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_i_3 <= ap_const_lv7_0;
        else 
            ap_sig_allocacmp_i_3 <= i_fu_106;
        end if; 
    end process;

    icmp_ln27_fu_320_p2 <= "1" when (ap_sig_allocacmp_i_3 = ap_const_lv7_50) else "0";
    kValues_address0 <= zext_ln27_fu_332_p1(7 - 1 downto 0);

    kValues_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            kValues_ce0_local <= ap_const_logic_1;
        else 
            kValues_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    lshr_ln5_fu_406_p4 <= add_i26_i251_load_reg_729(63 downto 14);
    lshr_ln6_fu_418_p4 <= add_i26_i251_load_reg_729(63 downto 18);
    lshr_ln7_fu_511_p4 <= thr_add562_load_reg_756(63 downto 28);
    lshr_ln8_fu_523_p4 <= thr_add562_load_reg_756(63 downto 34);
    lshr_ln9_fu_535_p4 <= thr_add562_load_reg_756(63 downto 39);
    lshr_ln_fu_430_p4 <= add_i26_i251_load_reg_729(63 downto 41);
    or_ln13_1_fu_450_p3 <= (trunc_ln18_fu_427_p1 & lshr_ln6_fu_418_p4);
    or_ln13_3_fu_458_p3 <= (trunc_ln19_fu_439_p1 & lshr_ln_fu_430_p4);
    or_ln13_fu_370_p2 <= (and_ln13_fu_358_p2 or and_ln13_1_fu_364_p2);
    or_ln15_1_fu_560_p3 <= (trunc_ln7_fu_520_p1 & lshr_ln7_fu_511_p4);
    or_ln15_2_fu_568_p3 <= (trunc_ln8_fu_532_p1 & lshr_ln8_fu_523_p4);
    or_ln15_3_fu_576_p2 <= (and_ln15_fu_551_p2 or and_ln15_1_fu_556_p2);
    or_ln15_4_fu_582_p3 <= (trunc_ln9_fu_544_p1 & lshr_ln9_fu_535_p4);
    or_ln15_fu_547_p2 <= (thr_add5625_load_reg_774 or thr_add56256_load_reg_767);
    or_ln2_fu_442_p3 <= (trunc_ln17_fu_415_p1 & lshr_ln5_fu_406_p4);
    t1_fu_488_p2 <= std_logic_vector(unsigned(add_ln13_2_fu_483_p2) + unsigned(add_ln13_1_fu_478_p2));
    thr_add562568_out <= thr_add562568_fu_126;

    thr_add562568_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln27_reg_715, ap_block_pp0_stage0_11001, ap_loop_exit_ready_pp0_iter1_reg)
    begin
        if (((icmp_ln27_reg_715 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1))) then 
            thr_add562568_out_ap_vld <= ap_const_logic_1;
        else 
            thr_add562568_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    thr_add56256_out <= thr_add56256_fu_138;

    thr_add56256_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln27_reg_715, ap_block_pp0_stage0_11001, ap_loop_exit_ready_pp0_iter1_reg)
    begin
        if (((icmp_ln27_reg_715 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1))) then 
            thr_add56256_out_ap_vld <= ap_const_logic_1;
        else 
            thr_add56256_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    thr_add5625_out <= thr_add5625_fu_114;

    thr_add5625_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln27_reg_715, ap_block_pp0_stage0_11001, ap_loop_exit_ready_pp0_iter1_reg)
    begin
        if (((icmp_ln27_reg_715 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1))) then 
            thr_add5625_out_ap_vld <= ap_const_logic_1;
        else 
            thr_add5625_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    thr_add562_out <= thr_add562_fu_118;

    thr_add562_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln27_reg_715, ap_block_pp0_stage0_11001, ap_loop_exit_ready_pp0_iter1_reg)
    begin
        if (((icmp_ln27_reg_715 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1))) then 
            thr_add562_out_ap_vld <= ap_const_logic_1;
        else 
            thr_add562_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    trunc_ln17_fu_415_p1 <= add_i26_i251_load_reg_729(14 - 1 downto 0);
    trunc_ln18_fu_427_p1 <= add_i26_i251_load_reg_729(18 - 1 downto 0);
    trunc_ln19_fu_439_p1 <= add_i26_i251_load_reg_729(41 - 1 downto 0);
    trunc_ln7_fu_520_p1 <= thr_add562_load_reg_756(28 - 1 downto 0);
    trunc_ln8_fu_532_p1 <= thr_add562_load_reg_756(34 - 1 downto 0);
    trunc_ln9_fu_544_p1 <= thr_add562_load_reg_756(39 - 1 downto 0);
    wValues_address0 <= zext_ln27_fu_332_p1(7 - 1 downto 0);
    wValues_ce0 <= wValues_ce0_local;

    wValues_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            wValues_ce0_local <= ap_const_logic_1;
        else 
            wValues_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    xor_ln13_1_fu_466_p2 <= (or_ln13_3_fu_458_p3 xor or_ln13_1_fu_450_p3);
    xor_ln13_2_fu_472_p2 <= (xor_ln13_1_fu_466_p2 xor or_ln2_fu_442_p3);
    xor_ln13_fu_352_p2 <= (ap_sig_allocacmp_add_i26_i251_load xor ap_const_lv64_FFFFFFFFFFFFFFFF);
    xor_ln15_1_fu_596_p2 <= (xor_ln15_fu_590_p2 xor or_ln15_1_fu_560_p3);
    xor_ln15_fu_590_p2 <= (or_ln15_4_fu_582_p3 xor or_ln15_2_fu_568_p3);
    zext_ln27_fu_332_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_i_3),64));
end behav;
