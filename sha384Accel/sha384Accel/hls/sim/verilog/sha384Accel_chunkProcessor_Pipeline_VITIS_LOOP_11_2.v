// ==============================================================
// Generated by Vitis HLS v2025.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2025 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module sha384Accel_chunkProcessor_Pipeline_VITIS_LOOP_11_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        wValues_address0,
        wValues_ce0,
        wValues_we0,
        wValues_d0,
        wValues_q0,
        wValues_address1,
        wValues_ce1,
        wValues_q1,
        wValues_address2,
        wValues_ce2,
        wValues_q2
);

parameter    ap_ST_fsm_pp0_stage0 = 2'd1;
parameter    ap_ST_fsm_pp0_stage1 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [6:0] wValues_address0;
output   wValues_ce0;
output   wValues_we0;
output  [63:0] wValues_d0;
input  [63:0] wValues_q0;
output  [6:0] wValues_address1;
output   wValues_ce1;
input  [63:0] wValues_q1;
output  [6:0] wValues_address2;
output   wValues_ce2;
input  [63:0] wValues_q2;

reg ap_idle;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_pp0_stage1_subdone;
reg    ap_enable_reg_pp0_iter0_reg;
reg   [0:0] icmp_ln11_reg_370;
reg    ap_condition_exit_pp0_iter0_stage1;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg   [6:0] i_reg_363;
wire    ap_block_pp0_stage0_11001;
reg   [6:0] i_reg_363_pp0_iter1_reg;
wire   [0:0] icmp_ln11_fu_133_p2;
reg   [63:0] wValues_load_reg_389;
wire    ap_block_pp0_stage1_11001;
wire   [63:0] add_ln16_3_fu_326_p2;
reg   [63:0] add_ln16_3_reg_399;
wire   [63:0] add_ln16_4_fu_347_p2;
reg   [63:0] add_ln16_4_reg_404;
wire   [63:0] zext_ln13_fu_145_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln14_fu_156_p1;
wire   [63:0] zext_ln16_fu_167_p1;
wire   [63:0] zext_ln16_1_fu_265_p1;
wire    ap_block_pp0_stage1;
wire   [63:0] zext_ln11_fu_352_p1;
reg   [6:0] i_1_fu_68;
wire   [6:0] add_ln11_fu_332_p2;
wire    ap_loop_init;
reg   [6:0] ap_sig_allocacmp_i;
reg    wValues_ce2_local;
reg    wValues_ce1_local;
reg   [6:0] wValues_address1_local;
reg    wValues_ce0_local;
reg   [6:0] wValues_address0_local;
reg    wValues_we0_local;
wire   [6:0] add_ln13_fu_139_p2;
wire   [6:0] add_ln14_fu_150_p2;
wire   [6:0] add_ln16_fu_161_p2;
wire   [56:0] shr3_fu_203_p4;
wire   [57:0] shr10_fu_245_p4;
wire   [5:0] trunc_ln11_fu_172_p1;
wire   [5:0] add_ln16_1_fu_259_p2;
wire   [60:0] trunc_ln38_fu_241_p1;
wire   [2:0] lshr_ln4_fu_231_p4;
wire   [18:0] trunc_ln37_fu_227_p1;
wire   [44:0] lshr_ln3_fu_217_p4;
wire   [7:0] trunc_ln28_fu_199_p1;
wire   [55:0] lshr_ln2_fu_189_p4;
wire   [63:0] zext_ln39_fu_255_p1;
wire   [63:0] or_ln16_1_fu_278_p3;
wire   [63:0] xor_ln16_fu_294_p2;
wire   [63:0] or_ln_fu_270_p3;
wire   [0:0] trunc_ln27_fu_185_p1;
wire   [62:0] lshr_ln_fu_175_p4;
wire   [63:0] or_ln16_3_fu_306_p3;
wire   [63:0] zext_ln29_fu_213_p1;
wire   [63:0] xor_ln16_2_fu_314_p2;
wire   [63:0] or_ln16_2_fu_286_p3;
wire   [63:0] xor_ln16_3_fu_320_p2;
wire   [63:0] xor_ln16_1_fu_300_p2;
wire   [63:0] add_ln16_2_fu_342_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [1:0] ap_NS_fsm;
wire    ap_block_pp0_stage0_subdone;
reg    ap_idle_pp0_1to1;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 i_1_fu_68 = 7'd0;
#0 ap_done_reg = 1'b0;
end

sha384Accel_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage1),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage1)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        i_1_fu_68 <= 7'd16;
    end else if (((icmp_ln11_reg_370 == 1'd0) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        i_1_fu_68 <= add_ln11_fu_332_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        add_ln16_3_reg_399 <= add_ln16_3_fu_326_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln16_4_reg_404 <= add_ln16_4_fu_347_p2;
        i_reg_363 <= ap_sig_allocacmp_i;
        i_reg_363_pp0_iter1_reg <= i_reg_363;
        icmp_ln11_reg_370 <= icmp_ln11_fu_133_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        wValues_load_reg_389 <= wValues_q0;
    end
end

always @ (*) begin
    if (((icmp_ln11_reg_370 == 1'd1) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b0)) begin
        ap_idle_pp0_1to1 = 1'b1;
    end else begin
        ap_idle_pp0_1to1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i = 7'd16;
    end else begin
        ap_sig_allocacmp_i = i_1_fu_68;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        wValues_address0_local = zext_ln11_fu_352_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        wValues_address0_local = zext_ln16_fu_167_p1;
    end else begin
        wValues_address0_local = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        wValues_address1_local = zext_ln16_1_fu_265_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        wValues_address1_local = zext_ln14_fu_156_p1;
    end else begin
        wValues_address1_local = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        wValues_ce0_local = 1'b1;
    end else begin
        wValues_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        wValues_ce1_local = 1'b1;
    end else begin
        wValues_ce1_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        wValues_ce2_local = 1'b1;
    end else begin
        wValues_ce2_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        wValues_we0_local = 1'b1;
    end else begin
        wValues_we0_local = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to1 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln11_fu_332_p2 = (i_reg_363 + 7'd1);

assign add_ln13_fu_139_p2 = ($signed(ap_sig_allocacmp_i) + $signed(7'd113));

assign add_ln14_fu_150_p2 = ($signed(ap_sig_allocacmp_i) + $signed(7'd126));

assign add_ln16_1_fu_259_p2 = ($signed(trunc_ln11_fu_172_p1) + $signed(6'd48));

assign add_ln16_2_fu_342_p2 = (wValues_load_reg_389 + wValues_q1);

assign add_ln16_3_fu_326_p2 = (xor_ln16_3_fu_320_p2 + xor_ln16_1_fu_300_p2);

assign add_ln16_4_fu_347_p2 = (add_ln16_3_reg_399 + add_ln16_2_fu_342_p2);

assign add_ln16_fu_161_p2 = ($signed(ap_sig_allocacmp_i) + $signed(7'd121));

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_done = ap_done_sig;

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage1;

assign ap_ready = ap_ready_sig;

assign icmp_ln11_fu_133_p2 = ((ap_sig_allocacmp_i == 7'd80) ? 1'b1 : 1'b0);

assign lshr_ln2_fu_189_p4 = {{wValues_q2[63:8]}};

assign lshr_ln3_fu_217_p4 = {{wValues_q1[63:19]}};

assign lshr_ln4_fu_231_p4 = {{wValues_q1[63:61]}};

assign lshr_ln_fu_175_p4 = {{wValues_q2[63:1]}};

assign or_ln16_1_fu_278_p3 = {{trunc_ln37_fu_227_p1}, {lshr_ln3_fu_217_p4}};

assign or_ln16_2_fu_286_p3 = {{trunc_ln28_fu_199_p1}, {lshr_ln2_fu_189_p4}};

assign or_ln16_3_fu_306_p3 = {{trunc_ln27_fu_185_p1}, {lshr_ln_fu_175_p4}};

assign or_ln_fu_270_p3 = {{trunc_ln38_fu_241_p1}, {lshr_ln4_fu_231_p4}};

assign shr10_fu_245_p4 = {{wValues_q1[63:6]}};

assign shr3_fu_203_p4 = {{wValues_q2[63:7]}};

assign trunc_ln11_fu_172_p1 = i_reg_363[5:0];

assign trunc_ln27_fu_185_p1 = wValues_q2[0:0];

assign trunc_ln28_fu_199_p1 = wValues_q2[7:0];

assign trunc_ln37_fu_227_p1 = wValues_q1[18:0];

assign trunc_ln38_fu_241_p1 = wValues_q1[60:0];

assign wValues_address0 = wValues_address0_local;

assign wValues_address1 = wValues_address1_local;

assign wValues_address2 = zext_ln13_fu_145_p1;

assign wValues_ce0 = wValues_ce0_local;

assign wValues_ce1 = wValues_ce1_local;

assign wValues_ce2 = wValues_ce2_local;

assign wValues_d0 = add_ln16_4_reg_404;

assign wValues_we0 = wValues_we0_local;

assign xor_ln16_1_fu_300_p2 = (xor_ln16_fu_294_p2 ^ or_ln_fu_270_p3);

assign xor_ln16_2_fu_314_p2 = (zext_ln29_fu_213_p1 ^ or_ln16_3_fu_306_p3);

assign xor_ln16_3_fu_320_p2 = (xor_ln16_2_fu_314_p2 ^ or_ln16_2_fu_286_p3);

assign xor_ln16_fu_294_p2 = (zext_ln39_fu_255_p1 ^ or_ln16_1_fu_278_p3);

assign zext_ln11_fu_352_p1 = i_reg_363_pp0_iter1_reg;

assign zext_ln13_fu_145_p1 = add_ln13_fu_139_p2;

assign zext_ln14_fu_156_p1 = add_ln14_fu_150_p2;

assign zext_ln16_1_fu_265_p1 = add_ln16_1_fu_259_p2;

assign zext_ln16_fu_167_p1 = add_ln16_fu_161_p2;

assign zext_ln29_fu_213_p1 = shr3_fu_203_p4;

assign zext_ln39_fu_255_p1 = shr10_fu_245_p4;

endmodule //sha384Accel_chunkProcessor_Pipeline_VITIS_LOOP_11_2
