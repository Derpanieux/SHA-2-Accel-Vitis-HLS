// ==============================================================
// Generated by Vitis HLS v2025.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2025 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="chunkIter_chunkIter,hls_ip_2025_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xa7s6-cpga196-2I,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.116000,HLS_SYN_LAT=5,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=262,HLS_SYN_LUT=816,HLS_VERSION=2025_1}" *)

module chunkIter (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        kt,
        wt,
        wvarsin_address0,
        wvarsin_ce0,
        wvarsin_q0,
        wvarsin_address1,
        wvarsin_ce1,
        wvarsin_q1,
        wvarsout_address0,
        wvarsout_ce0,
        wvarsout_we0,
        wvarsout_d0,
        wvarsout_address1,
        wvarsout_ce1,
        wvarsout_we1,
        wvarsout_d1
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_state3 = 6'd4;
parameter    ap_ST_fsm_state4 = 6'd8;
parameter    ap_ST_fsm_state5 = 6'd16;
parameter    ap_ST_fsm_state6 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] kt;
input  [31:0] wt;
output  [2:0] wvarsin_address0;
output   wvarsin_ce0;
input  [31:0] wvarsin_q0;
output  [2:0] wvarsin_address1;
output   wvarsin_ce1;
input  [31:0] wvarsin_q1;
output  [2:0] wvarsout_address0;
output   wvarsout_ce0;
output   wvarsout_we0;
output  [31:0] wvarsout_d0;
output  [2:0] wvarsout_address1;
output   wvarsout_ce1;
output   wvarsout_we1;
output  [31:0] wvarsout_d1;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [31:0] reg_259;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state4;
wire   [31:0] xor_ln13_2_fu_337_p2;
reg   [31:0] xor_ln13_2_reg_520;
reg   [31:0] wvarsin_load_1_reg_525;
wire    ap_CS_fsm_state3;
reg   [31:0] wvarsin_load_2_reg_530;
wire   [31:0] xor_ln15_1_fu_415_p2;
reg   [31:0] xor_ln15_1_reg_546;
wire   [31:0] or_ln13_fu_438_p2;
reg   [31:0] or_ln13_reg_561;
wire   [31:0] t1_fu_460_p2;
reg   [31:0] t1_reg_566;
wire    ap_CS_fsm_state5;
wire   [31:0] or_ln15_3_fu_483_p2;
reg   [31:0] or_ln15_3_reg_572;
wire    ap_CS_fsm_state6;
reg    wvarsin_ce0_local;
reg   [2:0] wvarsin_address0_local;
reg    wvarsin_ce1_local;
reg   [2:0] wvarsin_address1_local;
reg    wvarsout_we0_local;
reg   [31:0] wvarsout_d0_local;
reg    wvarsout_ce0_local;
reg   [2:0] wvarsout_address0_local;
reg    wvarsout_we1_local;
reg   [31:0] wvarsout_d1_local;
reg    wvarsout_ce1_local;
reg   [2:0] wvarsout_address1_local;
wire   [31:0] add_ln15_1_fu_493_p2;
wire   [31:0] add_ln19_fu_499_p2;
wire   [5:0] trunc_ln17_fu_275_p1;
wire   [25:0] lshr_ln_fu_265_p4;
wire   [10:0] trunc_ln18_fu_289_p1;
wire   [20:0] lshr_ln1_fu_279_p4;
wire   [24:0] trunc_ln19_fu_303_p1;
wire   [6:0] lshr_ln2_fu_293_p4;
wire   [31:0] or_ln13_1_fu_315_p3;
wire   [31:0] or_ln13_3_fu_323_p3;
wire   [31:0] xor_ln13_1_fu_331_p2;
wire   [31:0] or_ln_fu_307_p3;
wire   [1:0] trunc_ln7_fu_353_p1;
wire   [29:0] lshr_ln7_fu_343_p4;
wire   [12:0] trunc_ln8_fu_367_p1;
wire   [18:0] lshr_ln8_fu_357_p4;
wire   [21:0] trunc_ln9_fu_381_p1;
wire   [9:0] lshr_ln9_fu_371_p4;
wire   [31:0] or_ln15_2_fu_393_p3;
wire   [31:0] or_ln15_4_fu_401_p3;
wire   [31:0] xor_ln15_fu_409_p2;
wire   [31:0] or_ln15_1_fu_385_p3;
wire   [31:0] xor_ln13_fu_421_p2;
wire   [31:0] and_ln13_fu_427_p2;
wire   [31:0] and_ln13_1_fu_433_p2;
wire   [31:0] add_ln13_1_fu_449_p2;
wire   [31:0] add_ln13_2_fu_455_p2;
wire   [31:0] add_ln13_fu_444_p2;
wire   [31:0] or_ln15_fu_466_p2;
wire   [31:0] and_ln15_fu_472_p2;
wire   [31:0] and_ln15_1_fu_477_p2;
wire   [31:0] add_ln15_fu_489_p2;
reg   [5:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        reg_259 <= wvarsin_q1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        reg_259 <= wvarsin_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        or_ln13_reg_561 <= or_ln13_fu_438_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        or_ln15_3_reg_572 <= or_ln15_3_fu_483_p2;
        t1_reg_566 <= t1_fu_460_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        wvarsin_load_1_reg_525 <= wvarsin_q1;
        wvarsin_load_2_reg_530 <= wvarsin_q0;
        xor_ln15_1_reg_546 <= xor_ln15_1_fu_415_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        xor_ln13_2_reg_520 <= xor_ln13_2_fu_337_p2;
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        wvarsin_address0_local = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        wvarsin_address0_local = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        wvarsin_address0_local = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        wvarsin_address0_local = 64'd4;
    end else begin
        wvarsin_address0_local = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        wvarsin_address1_local = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        wvarsin_address1_local = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        wvarsin_address1_local = 64'd1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        wvarsin_address1_local = 64'd0;
    end else begin
        wvarsin_address1_local = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state2) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        wvarsin_ce0_local = 1'b1;
    end else begin
        wvarsin_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state2))) begin
        wvarsin_ce1_local = 1'b1;
    end else begin
        wvarsin_ce1_local = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        wvarsout_address0_local = 64'd0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        wvarsout_address0_local = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        wvarsout_address0_local = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        wvarsout_address0_local = 64'd1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        wvarsout_address0_local = 64'd5;
    end else begin
        wvarsout_address0_local = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        wvarsout_address1_local = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        wvarsout_address1_local = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        wvarsout_address1_local = 64'd6;
    end else begin
        wvarsout_address1_local = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state6))) begin
        wvarsout_ce0_local = 1'b1;
    end else begin
        wvarsout_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state6))) begin
        wvarsout_ce1_local = 1'b1;
    end else begin
        wvarsout_ce1_local = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        wvarsout_d0_local = add_ln15_1_fu_493_p2;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        wvarsout_d0_local = reg_259;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        wvarsout_d0_local = wvarsin_q1;
    end else if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state2))) begin
        wvarsout_d0_local = wvarsin_q0;
    end else begin
        wvarsout_d0_local = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        wvarsout_d1_local = add_ln19_fu_499_p2;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        wvarsout_d1_local = wvarsin_q0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        wvarsout_d1_local = wvarsin_load_2_reg_530;
    end else begin
        wvarsout_d1_local = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state6))) begin
        wvarsout_we0_local = 1'b1;
    end else begin
        wvarsout_we0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state6))) begin
        wvarsout_we1_local = 1'b1;
    end else begin
        wvarsout_we1_local = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln13_1_fu_449_p2 = (kt + wt);

assign add_ln13_2_fu_455_p2 = (add_ln13_1_fu_449_p2 + or_ln13_reg_561);

assign add_ln13_fu_444_p2 = (wvarsin_q1 + xor_ln13_2_reg_520);

assign add_ln15_1_fu_493_p2 = (add_ln15_fu_489_p2 + or_ln15_3_reg_572);

assign add_ln15_fu_489_p2 = (xor_ln15_1_reg_546 + t1_reg_566);

assign add_ln19_fu_499_p2 = (wvarsin_q1 + t1_reg_566);

assign and_ln13_1_fu_433_p2 = (wvarsin_load_2_reg_530 & reg_259);

assign and_ln13_fu_427_p2 = (xor_ln13_fu_421_p2 & wvarsin_q0);

assign and_ln15_1_fu_477_p2 = (wvarsin_q0 & reg_259);

assign and_ln15_fu_472_p2 = (wvarsin_load_1_reg_525 & or_ln15_fu_466_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign lshr_ln1_fu_279_p4 = {{wvarsin_q0[31:11]}};

assign lshr_ln2_fu_293_p4 = {{wvarsin_q0[31:25]}};

assign lshr_ln7_fu_343_p4 = {{wvarsin_q1[31:2]}};

assign lshr_ln8_fu_357_p4 = {{wvarsin_q1[31:13]}};

assign lshr_ln9_fu_371_p4 = {{wvarsin_q1[31:22]}};

assign lshr_ln_fu_265_p4 = {{wvarsin_q0[31:6]}};

assign or_ln13_1_fu_315_p3 = {{trunc_ln18_fu_289_p1}, {lshr_ln1_fu_279_p4}};

assign or_ln13_3_fu_323_p3 = {{trunc_ln19_fu_303_p1}, {lshr_ln2_fu_293_p4}};

assign or_ln13_fu_438_p2 = (and_ln13_fu_427_p2 | and_ln13_1_fu_433_p2);

assign or_ln15_1_fu_385_p3 = {{trunc_ln7_fu_353_p1}, {lshr_ln7_fu_343_p4}};

assign or_ln15_2_fu_393_p3 = {{trunc_ln8_fu_367_p1}, {lshr_ln8_fu_357_p4}};

assign or_ln15_3_fu_483_p2 = (and_ln15_fu_472_p2 | and_ln15_1_fu_477_p2);

assign or_ln15_4_fu_401_p3 = {{trunc_ln9_fu_381_p1}, {lshr_ln9_fu_371_p4}};

assign or_ln15_fu_466_p2 = (wvarsin_q0 | reg_259);

assign or_ln_fu_307_p3 = {{trunc_ln17_fu_275_p1}, {lshr_ln_fu_265_p4}};

assign t1_fu_460_p2 = (add_ln13_2_fu_455_p2 + add_ln13_fu_444_p2);

assign trunc_ln17_fu_275_p1 = wvarsin_q0[5:0];

assign trunc_ln18_fu_289_p1 = wvarsin_q0[10:0];

assign trunc_ln19_fu_303_p1 = wvarsin_q0[24:0];

assign trunc_ln7_fu_353_p1 = wvarsin_q1[1:0];

assign trunc_ln8_fu_367_p1 = wvarsin_q1[12:0];

assign trunc_ln9_fu_381_p1 = wvarsin_q1[21:0];

assign wvarsin_address0 = wvarsin_address0_local;

assign wvarsin_address1 = wvarsin_address1_local;

assign wvarsin_ce0 = wvarsin_ce0_local;

assign wvarsin_ce1 = wvarsin_ce1_local;

assign wvarsout_address0 = wvarsout_address0_local;

assign wvarsout_address1 = wvarsout_address1_local;

assign wvarsout_ce0 = wvarsout_ce0_local;

assign wvarsout_ce1 = wvarsout_ce1_local;

assign wvarsout_d0 = wvarsout_d0_local;

assign wvarsout_d1 = wvarsout_d1_local;

assign wvarsout_we0 = wvarsout_we0_local;

assign wvarsout_we1 = wvarsout_we1_local;

assign xor_ln13_1_fu_331_p2 = (or_ln13_3_fu_323_p3 ^ or_ln13_1_fu_315_p3);

assign xor_ln13_2_fu_337_p2 = (xor_ln13_1_fu_331_p2 ^ or_ln_fu_307_p3);

assign xor_ln13_fu_421_p2 = (reg_259 ^ 32'd4294967295);

assign xor_ln15_1_fu_415_p2 = (xor_ln15_fu_409_p2 ^ or_ln15_1_fu_385_p3);

assign xor_ln15_fu_409_p2 = (or_ln15_4_fu_401_p3 ^ or_ln15_2_fu_393_p3);

endmodule //chunkIter
