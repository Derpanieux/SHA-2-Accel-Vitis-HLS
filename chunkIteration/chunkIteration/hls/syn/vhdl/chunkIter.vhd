-- ==============================================================
-- Generated by Vitis HLS v2025.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2025 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity chunkIter is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    kt : IN STD_LOGIC_VECTOR (31 downto 0);
    wt : IN STD_LOGIC_VECTOR (31 downto 0);
    wvarsin_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    wvarsin_ce0 : OUT STD_LOGIC;
    wvarsin_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    wvarsin_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    wvarsin_ce1 : OUT STD_LOGIC;
    wvarsin_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    wvarsout_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    wvarsout_ce0 : OUT STD_LOGIC;
    wvarsout_we0 : OUT STD_LOGIC;
    wvarsout_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    wvarsout_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    wvarsout_ce1 : OUT STD_LOGIC;
    wvarsout_we1 : OUT STD_LOGIC;
    wvarsout_d1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of chunkIter is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "chunkIter_chunkIter,hls_ip_2025_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xa7s6-cpga196-2I,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.116000,HLS_SYN_LAT=5,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=262,HLS_SYN_LUT=816,HLS_VERSION=2025_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_5 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000101";
    constant ap_const_lv64_6 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000110";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_7 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000111";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal reg_259 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal xor_ln13_2_fu_337_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln13_2_reg_520 : STD_LOGIC_VECTOR (31 downto 0);
    signal wvarsin_load_1_reg_525 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal wvarsin_load_2_reg_530 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln15_1_fu_415_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln15_1_reg_546 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln13_fu_438_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln13_reg_561 : STD_LOGIC_VECTOR (31 downto 0);
    signal t1_fu_460_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal t1_reg_566 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal or_ln15_3_fu_483_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln15_3_reg_572 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal wvarsin_ce0_local : STD_LOGIC;
    signal wvarsin_address0_local : STD_LOGIC_VECTOR (2 downto 0);
    signal wvarsin_ce1_local : STD_LOGIC;
    signal wvarsin_address1_local : STD_LOGIC_VECTOR (2 downto 0);
    signal wvarsout_we0_local : STD_LOGIC;
    signal wvarsout_d0_local : STD_LOGIC_VECTOR (31 downto 0);
    signal wvarsout_ce0_local : STD_LOGIC;
    signal wvarsout_address0_local : STD_LOGIC_VECTOR (2 downto 0);
    signal wvarsout_we1_local : STD_LOGIC;
    signal wvarsout_d1_local : STD_LOGIC_VECTOR (31 downto 0);
    signal wvarsout_ce1_local : STD_LOGIC;
    signal wvarsout_address1_local : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln15_1_fu_493_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln19_fu_499_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln17_fu_275_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal lshr_ln_fu_265_p4 : STD_LOGIC_VECTOR (25 downto 0);
    signal trunc_ln18_fu_289_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal lshr_ln1_fu_279_p4 : STD_LOGIC_VECTOR (20 downto 0);
    signal trunc_ln19_fu_303_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal lshr_ln2_fu_293_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal or_ln13_1_fu_315_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln13_3_fu_323_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln13_1_fu_331_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln_fu_307_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln7_fu_353_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal lshr_ln7_fu_343_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal trunc_ln8_fu_367_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal lshr_ln8_fu_357_p4 : STD_LOGIC_VECTOR (18 downto 0);
    signal trunc_ln9_fu_381_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal lshr_ln9_fu_371_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln15_2_fu_393_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln15_4_fu_401_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln15_fu_409_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln15_1_fu_385_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln13_fu_421_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln13_fu_427_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln13_1_fu_433_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln13_1_fu_449_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln13_2_fu_455_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln13_fu_444_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln15_fu_466_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln15_fu_472_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln15_1_fu_477_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln15_fu_489_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    reg_259_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                reg_259 <= wvarsin_q1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                reg_259 <= wvarsin_q0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                or_ln13_reg_561 <= or_ln13_fu_438_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                or_ln15_3_reg_572 <= or_ln15_3_fu_483_p2;
                t1_reg_566 <= t1_fu_460_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                wvarsin_load_1_reg_525 <= wvarsin_q1;
                wvarsin_load_2_reg_530 <= wvarsin_q0;
                xor_ln15_1_reg_546 <= xor_ln15_1_fu_415_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                xor_ln13_2_reg_520 <= xor_ln13_2_fu_337_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    add_ln13_1_fu_449_p2 <= std_logic_vector(unsigned(kt) + unsigned(wt));
    add_ln13_2_fu_455_p2 <= std_logic_vector(unsigned(add_ln13_1_fu_449_p2) + unsigned(or_ln13_reg_561));
    add_ln13_fu_444_p2 <= std_logic_vector(unsigned(wvarsin_q1) + unsigned(xor_ln13_2_reg_520));
    add_ln15_1_fu_493_p2 <= std_logic_vector(unsigned(add_ln15_fu_489_p2) + unsigned(or_ln15_3_reg_572));
    add_ln15_fu_489_p2 <= std_logic_vector(unsigned(xor_ln15_1_reg_546) + unsigned(t1_reg_566));
    add_ln19_fu_499_p2 <= std_logic_vector(unsigned(wvarsin_q1) + unsigned(t1_reg_566));
    and_ln13_1_fu_433_p2 <= (wvarsin_load_2_reg_530 and reg_259);
    and_ln13_fu_427_p2 <= (xor_ln13_fu_421_p2 and wvarsin_q0);
    and_ln15_1_fu_477_p2 <= (wvarsin_q0 and reg_259);
    and_ln15_fu_472_p2 <= (wvarsin_load_1_reg_525 and or_ln15_fu_466_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    lshr_ln1_fu_279_p4 <= wvarsin_q0(31 downto 11);
    lshr_ln2_fu_293_p4 <= wvarsin_q0(31 downto 25);
    lshr_ln7_fu_343_p4 <= wvarsin_q1(31 downto 2);
    lshr_ln8_fu_357_p4 <= wvarsin_q1(31 downto 13);
    lshr_ln9_fu_371_p4 <= wvarsin_q1(31 downto 22);
    lshr_ln_fu_265_p4 <= wvarsin_q0(31 downto 6);
    or_ln13_1_fu_315_p3 <= (trunc_ln18_fu_289_p1 & lshr_ln1_fu_279_p4);
    or_ln13_3_fu_323_p3 <= (trunc_ln19_fu_303_p1 & lshr_ln2_fu_293_p4);
    or_ln13_fu_438_p2 <= (and_ln13_fu_427_p2 or and_ln13_1_fu_433_p2);
    or_ln15_1_fu_385_p3 <= (trunc_ln7_fu_353_p1 & lshr_ln7_fu_343_p4);
    or_ln15_2_fu_393_p3 <= (trunc_ln8_fu_367_p1 & lshr_ln8_fu_357_p4);
    or_ln15_3_fu_483_p2 <= (and_ln15_fu_472_p2 or and_ln15_1_fu_477_p2);
    or_ln15_4_fu_401_p3 <= (trunc_ln9_fu_381_p1 & lshr_ln9_fu_371_p4);
    or_ln15_fu_466_p2 <= (wvarsin_q0 or reg_259);
    or_ln_fu_307_p3 <= (trunc_ln17_fu_275_p1 & lshr_ln_fu_265_p4);
    t1_fu_460_p2 <= std_logic_vector(unsigned(add_ln13_2_fu_455_p2) + unsigned(add_ln13_fu_444_p2));
    trunc_ln17_fu_275_p1 <= wvarsin_q0(6 - 1 downto 0);
    trunc_ln18_fu_289_p1 <= wvarsin_q0(11 - 1 downto 0);
    trunc_ln19_fu_303_p1 <= wvarsin_q0(25 - 1 downto 0);
    trunc_ln7_fu_353_p1 <= wvarsin_q1(2 - 1 downto 0);
    trunc_ln8_fu_367_p1 <= wvarsin_q1(13 - 1 downto 0);
    trunc_ln9_fu_381_p1 <= wvarsin_q1(22 - 1 downto 0);
    wvarsin_address0 <= wvarsin_address0_local;

    wvarsin_address0_local_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            wvarsin_address0_local <= ap_const_lv64_2(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            wvarsin_address0_local <= ap_const_lv64_6(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            wvarsin_address0_local <= ap_const_lv64_5(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            wvarsin_address0_local <= ap_const_lv64_4(3 - 1 downto 0);
        else 
            wvarsin_address0_local <= "XXX";
        end if; 
    end process;

    wvarsin_address1 <= wvarsin_address1_local;

    wvarsin_address1_local_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state3, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            wvarsin_address1_local <= ap_const_lv64_3(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            wvarsin_address1_local <= ap_const_lv64_7(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            wvarsin_address1_local <= ap_const_lv64_1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            wvarsin_address1_local <= ap_const_lv64_0(3 - 1 downto 0);
        else 
            wvarsin_address1_local <= "XXX";
        end if; 
    end process;

    wvarsin_ce0 <= wvarsin_ce0_local;

    wvarsin_ce0_local_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
            wvarsin_ce0_local <= ap_const_logic_1;
        else 
            wvarsin_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    wvarsin_ce1 <= wvarsin_ce1_local;

    wvarsin_ce1_local_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state3, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            wvarsin_ce1_local <= ap_const_logic_1;
        else 
            wvarsin_ce1_local <= ap_const_logic_0;
        end if; 
    end process;

    wvarsout_address0 <= wvarsout_address0_local;

    wvarsout_address0_local_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            wvarsout_address0_local <= ap_const_lv64_0(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            wvarsout_address0_local <= ap_const_lv64_2(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            wvarsout_address0_local <= ap_const_lv64_7(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            wvarsout_address0_local <= ap_const_lv64_1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            wvarsout_address0_local <= ap_const_lv64_5(3 - 1 downto 0);
        else 
            wvarsout_address0_local <= "XXX";
        end if; 
    end process;

    wvarsout_address1 <= wvarsout_address1_local;

    wvarsout_address1_local_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            wvarsout_address1_local <= ap_const_lv64_4(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            wvarsout_address1_local <= ap_const_lv64_3(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            wvarsout_address1_local <= ap_const_lv64_6(3 - 1 downto 0);
        else 
            wvarsout_address1_local <= "XXX";
        end if; 
    end process;

    wvarsout_ce0 <= wvarsout_ce0_local;

    wvarsout_ce0_local_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            wvarsout_ce0_local <= ap_const_logic_1;
        else 
            wvarsout_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    wvarsout_ce1 <= wvarsout_ce1_local;

    wvarsout_ce1_local_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            wvarsout_ce1_local <= ap_const_logic_1;
        else 
            wvarsout_ce1_local <= ap_const_logic_0;
        end if; 
    end process;

    wvarsout_d0 <= wvarsout_d0_local;

    wvarsout_d0_local_assign_proc : process(wvarsin_q0, wvarsin_q1, reg_259, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state6, add_ln15_1_fu_493_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            wvarsout_d0_local <= add_ln15_1_fu_493_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            wvarsout_d0_local <= reg_259;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            wvarsout_d0_local <= wvarsin_q1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            wvarsout_d0_local <= wvarsin_q0;
        else 
            wvarsout_d0_local <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    wvarsout_d1 <= wvarsout_d1_local;

    wvarsout_d1_local_assign_proc : process(wvarsin_q0, ap_CS_fsm_state4, wvarsin_load_2_reg_530, ap_CS_fsm_state5, ap_CS_fsm_state6, add_ln19_fu_499_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            wvarsout_d1_local <= add_ln19_fu_499_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            wvarsout_d1_local <= wvarsin_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            wvarsout_d1_local <= wvarsin_load_2_reg_530;
        else 
            wvarsout_d1_local <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    wvarsout_we0 <= wvarsout_we0_local;

    wvarsout_we0_local_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            wvarsout_we0_local <= ap_const_logic_1;
        else 
            wvarsout_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    wvarsout_we1 <= wvarsout_we1_local;

    wvarsout_we1_local_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            wvarsout_we1_local <= ap_const_logic_1;
        else 
            wvarsout_we1_local <= ap_const_logic_0;
        end if; 
    end process;

    xor_ln13_1_fu_331_p2 <= (or_ln13_3_fu_323_p3 xor or_ln13_1_fu_315_p3);
    xor_ln13_2_fu_337_p2 <= (xor_ln13_1_fu_331_p2 xor or_ln_fu_307_p3);
    xor_ln13_fu_421_p2 <= (reg_259 xor ap_const_lv32_FFFFFFFF);
    xor_ln15_1_fu_415_p2 <= (xor_ln15_fu_409_p2 xor or_ln15_1_fu_385_p3);
    xor_ln15_fu_409_p2 <= (or_ln15_4_fu_401_p3 xor or_ln15_2_fu_393_p3);
end behav;
